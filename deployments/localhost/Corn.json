{
  "address": "0x2bdCC0de6bE1f7D2ee689a0342D76F52E8EFABa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BurnApproval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TransferApproval",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "addMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "spender",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "summoner",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "burnAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "summoner",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "burner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "summoner",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "summoner",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter",
          "type": "address"
        }
      ],
      "name": "removeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "executor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaf1799394de4b544d7831b85236f48e6b4f1b7c8948bdded38acc5e557c2890c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2bdCC0de6bE1f7D2ee689a0342D76F52E8EFABa3",
    "transactionIndex": 0,
    "gasUsed": "1878037",
    "logsBloom": "0x
    "blockHash": "0x58dfb1bdb4c00a17372c6a3c0b80898f8f399a5a25a32ae7fb60bb1395787707",
    "transactionHash": "0xaf1799394de4b544d7831b85236f48e6b4f1b7c8948bdded38acc5e557c2890c",
    "logs": [],
    "blockNumber": 17927995,
    "cumulativeGasUsed": "1878037",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "bf26976eeb28664b987b825023e7153a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnApproval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferApproval\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spender\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"summoner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"summoner\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"summoner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"summoner\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"}],\"name\":\"removeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"executor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/crops/Corn.sol\":\"Corn\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/abstracts/Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./RERC20.sol\\\";\\n\\nabstract contract RarityBurnable is RERC20 {\\n  using SafeMath for uint256;\\n\\n  mapping(address => mapping(uint256 => uint256)) public burnAllowance;\\n\\n  event Burn(uint256 indexed from, uint256 indexed to, uint256 amount);\\n  event BurnApproval(uint256 indexed from, address indexed to, uint256 amount);\\n\\n  function _burnApprove(\\n    uint256 from,\\n    address burner,\\n    uint256 amount\\n  ) internal returns (bool) {\\n    burnAllowance[burner][from] = amount;\\n    emit BurnApproval(from, burner, amount);\\n    return true;\\n  }\\n\\n  function _burn(uint256 dst, uint256 amount) internal {\\n    uint256 balance = balanceOf[dst];\\n    require(balance >= amount, \\\"Balance too low\\\");\\n    totalSupply = totalSupply.sub(amount);\\n    balanceOf[dst] = balance.sub(amount);\\n    emit Burn(dst, dst, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x2a25fab4855f13698febf939a1b8d962f576c401e528aa3d1682e6d7a6139585\",\"license\":\"MIT\"},\"contracts/abstracts/Crop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./RERC20.sol\\\";\\nimport \\\"./Mintable.sol\\\";\\nimport \\\"./Burnable.sol\\\";\\n\\nabstract contract Crop is RERC20, RarityBurnable, RarityMintable {\\n  using SafeMath for uint256;\\n\\n  function mint(uint256 summoner, uint256 amount) external {\\n    require(!_isPaused(), \\\"Contract is paused\\\");\\n    require(minters[msg.sender] == true, \\\"Mint Access Denied\\\");\\n    _mint(summoner, amount);\\n  }\\n\\n  function addMinter(address minter) external {\\n    require(msg.sender == owner, \\\"Must be owner\\\");\\n    _addMinter(minter);\\n  }\\n\\n  function removeMinter(address minter) external {\\n    require(msg.sender == owner, \\\"Must be owner\\\");\\n    _removeMinter(minter);\\n  }\\n\\n  function burn(uint256 summoner, uint256 amount) external {\\n    require(!_isPaused(), \\\"Contract is paused\\\");\\n    require(_isRarityOwner(summoner), \\\"Must be owner\\\");\\n    _burn(summoner, amount);\\n  }\\n\\n  function burnFrom(uint256 summoner, uint256 amount) external {\\n    require(!_isPaused(), \\\"Contract is paused\\\");\\n    uint256 allowance = burnAllowance[msg.sender][summoner];\\n    require(amount <= allowance, \\\"Requested Burn greater than approval\\\");\\n    _burn(summoner, amount);\\n    burnAllowance[msg.sender][summoner] = allowance.sub(amount);\\n  }\\n\\n  function burnApprove(\\n    uint256 summoner,\\n    address burner,\\n    uint256 amount\\n  ) external {\\n    require(!_isPaused(), \\\"Contract is paused\\\");\\n    require(_isRarityOwner(summoner), \\\"Must be owner\\\");\\n    _burnApprove(summoner, burner, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x75f4226a3314cd113eb2c0780a2d1ca79b2558289b8654d174291706dc7df78f\",\"license\":\"MIT\"},\"contracts/abstracts/Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./RERC20.sol\\\";\\n\\nabstract contract RarityMintable is RERC20 {\\n  using SafeMath for uint256;\\n\\n  mapping(address => bool) public minters;\\n\\n  event Mint(uint256 indexed from, uint256 indexed to, uint256 amount);\\n\\n  function _mint(uint256 dst, uint256 amount) internal {\\n    uint256 balance = balanceOf[dst];\\n    totalSupply = totalSupply.add(amount);\\n    balanceOf[dst] = balance.add(amount);\\n    emit Mint(dst, dst, amount);\\n  }\\n\\n  function _addMinter(address minter) internal {\\n    minters[minter] = true;\\n  }\\n\\n  function _removeMinter(address minter) internal {\\n    minters[minter] = false;\\n  }\\n}\\n\",\"keccak256\":\"0x5bd8ea1ba34b4bd24ea50ab29841879fc88e2533b397fdba89fcd0269bb928f5\",\"license\":\"MIT\"},\"contracts/abstracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nabstract contract Ownable {\\n  address public owner;\\n\\n  constructor() {\\n    owner = msg.sender;\\n  }\\n\\n  function _isOwner(address addr) internal view returns (bool) {\\n    return owner == addr;\\n  }\\n\\n  function _setOwner(address addr) internal returns (bool) {\\n    owner = addr;\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0xc4263a694a12743fea22f2eaae9094cc65e79204898548d8fc8916231dcf86bd\",\"license\":\"MIT\"},\"contracts/abstracts/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nabstract contract Pausable {\\n  bool public paused;\\n  mapping(address => bool) public pausers;\\n\\n  constructor() {\\n    paused = false;\\n    pausers[msg.sender] = true;\\n  }\\n\\n  function _isPaused() internal view returns (bool) {\\n    return paused == true;\\n  }\\n\\n  function pause() external returns (bool) {\\n    require(pausers[msg.sender], \\\"Pause denied\\\");\\n    _pause();\\n    return true;\\n  }\\n\\n  function unpause() external returns (bool) {\\n    require(pausers[msg.sender], \\\"Unpause denied\\\");\\n    _unpause();\\n    return true;\\n  }\\n\\n  function _addPauser(address addr) internal returns (bool) {\\n    pausers[addr] = true;\\n    return true;\\n  }\\n\\n  function _removePauser(address addr) internal returns (bool) {\\n    pausers[addr] = false;\\n    return true;\\n  }\\n\\n  function _pause() internal {\\n    paused = true;\\n  }\\n\\n  function _unpause() internal {\\n    paused = false;\\n  }\\n}\\n\",\"keccak256\":\"0x97aa1cffaa62bf33d2d70b57e516c689c9cba0c0a6af2ea3c8662f04d4c85bb6\",\"license\":\"MIT\"},\"contracts/abstracts/RERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./Rarity.sol\\\";\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./Pausable.sol\\\";\\n\\nabstract contract RERC20 is Rarity, Ownable, Pausable {\\n  using SafeMath for uint256;\\n  string public name;\\n  string public symbol;\\n  uint256 public totalSupply = 0;\\n  uint8 public constant decimals = 18;\\n\\n  mapping(uint256 => uint256) public balanceOf;\\n  mapping(uint256 => mapping(uint256 => uint256)) public transferAllowance;\\n\\n  event Transfer(uint256 indexed from, uint256 indexed to, uint256 amount);\\n  event TransferApproval(\\n    uint256 indexed from,\\n    uint256 indexed to,\\n    uint256 amount\\n  );\\n\\n  constructor() Rarity() Ownable() Pausable() {}\\n\\n  function approve(\\n    uint256 from,\\n    uint256 spender,\\n    uint256 amount\\n  ) external returns (bool) {\\n    require(_isRarityApprovedOrOwner(from), \\\"Must be owner\\\");\\n    transferAllowance[from][spender] = amount;\\n\\n    emit TransferApproval(from, spender, amount);\\n    return true;\\n  }\\n\\n  function transfer(\\n    uint256 from,\\n    uint256 to,\\n    uint256 amount\\n  ) external returns (bool) {\\n    require(!_isPaused(), \\\"Contract is paused\\\");\\n    require(_isRarityApprovedOrOwner(from), \\\"Must be owner\\\");\\n    _transferTokens(from, to, amount);\\n    return true;\\n  }\\n\\n  function transferFrom(\\n    uint256 executor,\\n    uint256 from,\\n    uint256 to,\\n    uint256 amount\\n  ) external returns (bool) {\\n    require(!_isPaused(), \\\"Contract is paused\\\");\\n    require(_isRarityApprovedOrOwner(executor), \\\"Must be owner\\\");\\n    uint256 spender = executor;\\n    uint256 allowance = transferAllowance[from][spender];\\n    require(amount <= allowance, \\\"Transfer amount greater than approval\\\");\\n    _transferTokens(from, to, amount);\\n    transferAllowance[from][spender] = allowance.sub(amount);\\n    return true;\\n  }\\n\\n  function _transferTokens(\\n    uint256 from,\\n    uint256 to,\\n    uint256 amount\\n  ) internal {\\n    balanceOf[from] = balanceOf[from].sub(amount);\\n    balanceOf[to] = balanceOf[to].add(amount);\\n\\n    emit Transfer(from, to, amount);\\n  }\\n\\n  function setOwner(address _owner) external returns (bool) {\\n    require(_isOwner(msg.sender), \\\"Must be owner\\\");\\n    _setOwner(_owner);\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0x56a6b0b49ba2c4366401ded5f0b0f668ed0216332c56a1e25aae799e20dbac14\",\"license\":\"MIT\"},\"contracts/abstracts/Rarity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IRarity {\\n  function level(uint256) external view returns (uint256);\\n\\n  function getApproved(uint256) external view returns (address);\\n\\n  function ownerOf(uint256) external view returns (address);\\n\\n  function summoner(uint256)\\n    external\\n    view\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    );\\n\\n  function adventure(uint256) external;\\n}\\n\\ninterface IRarityAttributes {\\n  function ability_scores(uint256)\\n    external\\n    view\\n    returns (\\n      uint32,\\n      uint32,\\n      uint32,\\n      uint32,\\n      uint32,\\n      uint32\\n    );\\n}\\n\\ninterface IRarityRandomCodex {\\n  function d20(uint256) external view returns (uint256);\\n}\\n\\nabstract contract Rarity {\\n  IRarity constant _rm = IRarity(0xce761D788DF608BD21bdd59d6f4B54b2e27F25Bb);\\n  IRarityAttributes constant _attr =\\n    IRarityAttributes(0xB5F5AF1087A8DA62A23b08C00C6ec9af21F397a1);\\n  IRarityRandomCodex constant _random =\\n    IRarityRandomCodex(0x7426dBE5207C2b5DaC57d8e55F0959fcD99661D4);\\n\\n  constructor() {}\\n\\n  function _isRarityOwner(uint256 _summoner) internal view returns (bool) {\\n    return _getRarity().ownerOf(_summoner) == msg.sender;\\n  }\\n\\n  function _isRarityApproved(uint256 _summoner) internal view returns (bool) {\\n    return _getRarity().getApproved(_summoner) == msg.sender;\\n  }\\n\\n  function _isRarityApprovedOrOwner(uint256 _summoner)\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _isRarityApproved(_summoner) || _isRarityOwner(_summoner);\\n  }\\n\\n  function _getRarity() internal pure returns (IRarity) {\\n    return _rm;\\n  }\\n\\n  function _getRarityAttributes() internal pure returns (IRarityAttributes) {\\n    return _attr;\\n  }\\n\\n  function _getRarityRandom() internal pure returns (IRarityRandomCodex) {\\n    return _random;\\n  }\\n\\n  function _getSummonerAttributes(uint256 _summoner)\\n    internal\\n    view\\n    returns (uint32[6] memory)\\n  {\\n    (\\n      uint32 _str,\\n      uint32 _dex,\\n      uint32 _con,\\n      uint32 _int,\\n      uint32 _wis,\\n      uint32 _cha\\n    ) = _getRarityAttributes().ability_scores(_summoner);\\n    uint32[6] memory scores = [_str, _dex, _con, _int, _wis, _cha];\\n    return scores;\\n  }\\n\\n  function _getSummoner(uint256 _summoner)\\n    internal\\n    view\\n    returns (uint256[4] memory)\\n  {\\n    (uint256 _xp, uint256 _log, uint256 _class, uint256 _level) = _getRarity()\\n      .summoner(_summoner);\\n    uint256[4] memory result = [_xp, _log, _class, _level];\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xf64be1d70018f0d7b6fae71d7caa534d14e862d82dfb90ab64bbe02d0c47784b\",\"license\":\"MIT\"},\"contracts/crops/Corn.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"../abstracts/Crop.sol\\\";\\n\\ncontract Corn is Crop {\\n  constructor() RERC20() {\\n    name = \\\"RarityFarms-Corn\\\";\\n    symbol = \\\"CORN\\\";\\n  }\\n}\\n\",\"keccak256\":\"0x60964d385ed989468d0ffdfee7ec7db11c54998d482d1f6ae0863aefaf622a2f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006004553480156200001657600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008060146101000a81548160ff02191690831515021790555060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506040518060400160405280601081526020017f5261726974794661726d732d436f726e0000000000000000000000000000000081525060029080519060200190620001159291906200016a565b506040518060400160405280600481526020017f434f524e0000000000000000000000000000000000000000000000000000000081525060039080519060200190620001639291906200016a565b506200027f565b82805462000178906200021a565b90600052602060002090601f0160209004810192826200019c5760008555620001e8565b82601f10620001b757805160ff1916838001178555620001e8565b82800160010185558215620001e8579182015b82811115620001e7578251825591602001919060010190620001ca565b5b509050620001f79190620001fb565b5090565b5b8082111562000216576000816000905550600101620001fc565b5090565b600060028204905060018216806200023357607f821691505b602082108114156200024a576200024962000250565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b611f5d806200028f6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806380f51c12116100c357806395d89b411161007c57806395d89b41146103b4578063983b2d56146103d25780639cc7f708146103ee578063b390c0ab1461041e578063b866c8a41461043a578063f46eccc41461046a5761014d565b806380f51c12146102cc5780638456cb59146102fc5780638769fd411461031a5780638856f779146103365780638da5cb5b1461036657806390dd2627146103845761014d565b80631b2ef1ca116101155780631b2ef1ca1461020a5780633092afd514610226578063313ce567146102425780633f4ba83a146102605780635c975abb1461027e578063756a86bd1461029c5761014d565b806306fdde03146101525780630c68efe3146101705780630d99bd6c1461018c57806313af4035146101bc57806318160ddd146101ec575b600080fd5b61015a61049a565b6040516101679190611a39565b60405180910390f35b61018a60048036038101906101859190611729565b610528565b005b6101a660048036038101906101a191906116bc565b6105c9565b6040516101b39190611b5b565b60405180910390f35b6101d660048036038101906101d19190611662565b6105ee565b6040516101e39190611a1e565b60405180910390f35b6101f461064b565b6040516102019190611b5b565b60405180910390f35b610224600480360381019061021f919061177c565b610651565b005b610240600480360381019061023b9190611662565b61073a565b005b61024a6107d4565b6040516102579190611b76565b60405180910390f35b6102686107d9565b6040516102759190611a1e565b60405180910390f35b610286610876565b6040516102939190611a1e565b60405180910390f35b6102b660048036038101906102b1919061177c565b610889565b6040516102c39190611b5b565b60405180910390f35b6102e660048036038101906102e19190611662565b6108ae565b6040516102f39190611a1e565b60405180910390f35b6103046108ce565b6040516103119190611a1e565b60405180910390f35b610334600480360381019061032f919061177c565b61096b565b005b610350600480360381019061034b919061180f565b610ac1565b60405161035d9190611a1e565b60405180910390f35b61036e610c18565b60405161037b9190611a03565b60405180910390f35b61039e600480360381019061039991906117bc565b610c3c565b6040516103ab9190611a1e565b60405180910390f35b6103bc610ce4565b6040516103c99190611a39565b60405180910390f35b6103ec60048036038101906103e79190611662565b610d72565b005b610408600480360381019061040391906116fc565b610e0c565b6040516104159190611b5b565b60405180910390f35b6104386004803603810190610433919061177c565b610e24565b005b610454600480360381019061044f91906117bc565b610ec2565b6040516104619190611a1e565b60405180910390f35b610484600480360381019061047f9190611662565b610f79565b6040516104919190611a1e565b60405180910390f35b600280546104a790611cbf565b80601f01602080910402602001604051908101604052809291908181526020018280546104d390611cbf565b80156105205780601f106104f557610100808354040283529160200191610520565b820191906000526020600020905b81548152906001019060200180831161050357829003601f168201915b505050505081565b610530610f99565b15610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056790611b1b565b60405180910390fd5b61057983610fb7565b6105b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105af90611abb565b60405180910390fd5b6105c383838361107e565b50505050565b6007602052816000526040600020602052806000526040600020600091509150505481565b60006105f93361112f565b610638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062f90611abb565b60405180910390fd5b61064182611187565b5060019050919050565b60045481565b610659610f99565b15610699576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069090611b1b565b60405180910390fd5b60011515600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461072c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072390611a9b565b60405180910390fd5b61073682826111d2565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bf90611abb565b60405180910390fd5b6107d18161126d565b50565b601281565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085e90611b3b565b60405180910390fd5b61086f6112c8565b6001905090565b600060149054906101000a900460ff1681565b6006602052816000526040600020602052806000526040600020600091509150505481565b60016020528060005260406000206000915054906101000a900460ff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661095c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095390611a7b565b60405180910390fd5b6109646112e4565b6001905090565b610973610f99565b156109b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109aa90611b1b565b60405180910390fd5b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080821115610a4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4290611adb565b60405180910390fd5b610a558383611301565b610a6882826113df90919063ffffffff16565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002081905550505050565b6000610acb610f99565b15610b0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0290611b1b565b60405180910390fd5b610b14856113f5565b610b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4a90611abb565b60405180910390fd5b6000859050600060066000878152602001908152602001600020600083815260200190815260200160002054905080841115610bc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbb90611afb565b60405180910390fd5b610bcf868686611417565b610be284826113df90919063ffffffff16565b60066000888152602001908152602001600020600084815260200190815260200160002081905550600192505050949350505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610c46610f99565b15610c86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7d90611b1b565b60405180910390fd5b610c8f846113f5565b610cce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc590611abb565b60405180910390fd5b610cd9848484611417565b600190509392505050565b60038054610cf190611cbf565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1d90611cbf565b8015610d6a5780601f10610d3f57610100808354040283529160200191610d6a565b820191906000526020600020905b815481529060010190602001808311610d4d57829003601f168201915b505050505081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df790611abb565b60405180910390fd5b610e09816114cf565b50565b60056020528060005260406000206000915090505481565b610e2c610f99565b15610e6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6390611b1b565b60405180910390fd5b610e7582610fb7565b610eb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eab90611abb565b60405180910390fd5b610ebe8282611301565b5050565b6000610ecd846113f5565b610f0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0390611abb565b60405180910390fd5b816006600086815260200190815260200160002060008581526020019081526020016000208190555082847f93e4f1223795b575c8b108c82d62e117c59e8486f9ca2f3b1b237749c646747884604051610f669190611b5b565b60405180910390a3600190509392505050565b60086020528060005260406000206000915054906101000a900460ff1681565b600060011515600060149054906101000a900460ff16151514905090565b60003373ffffffffffffffffffffffffffffffffffffffff16610fd861152a565b73ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016110109190611b5b565b60206040518083038186803b15801561102857600080fd5b505afa15801561103c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611060919061168f565b73ffffffffffffffffffffffffffffffffffffffff16149050919050565b600081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff16847f25513def906e48f9e4a3b482e5ff228d356d8dda4744112c24c666c2d270fbeb8460405161111c9190611b5b565b60405180910390a3600190509392505050565b60008173ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b6000600560008481526020019081526020016000205490506111ff8260045461154690919063ffffffff16565b600481905550611218828261154690919063ffffffff16565b600560008581526020019081526020016000208190555082837f070aa035fe0a09f0d9305bdc2d7a5d93cd4733db3b1ff869b4a7033c9501909a846040516112609190611b5b565b60405180910390a3505050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008060146101000a81548160ff021916908315150217905550565b6001600060146101000a81548160ff021916908315150217905550565b6000600560008481526020019081526020016000205490508181101561135c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135390611a5b565b60405180910390fd5b611371826004546113df90919063ffffffff16565b60048190555061138a82826113df90919063ffffffff16565b600560008581526020019081526020016000208190555082837f5af801e983cfd842de8b0797a2d6077db3ac2dea16571e0c7f5080291ca1b934846040516113d29190611b5b565b60405180910390a3505050565b600081836113ed9190611c03565b905092915050565b60006114008261155c565b80611410575061140f82610fb7565b5b9050919050565b61143d8160056000868152602001908152602001600020546113df90919063ffffffff16565b600560008581526020019081526020016000208190555061147a81600560008581526020019081526020016000205461154690919063ffffffff16565b600560008481526020019081526020016000208190555081837faf6151f5085accf2d57e1e7bf7601d3b3982e0de7e9a90f032f8554de9c104f6836040516114c29190611b5b565b60405180910390a3505050565b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600073ce761d788df608bd21bdd59d6f4b54b2e27f25bb905090565b600081836115549190611bad565b905092915050565b60003373ffffffffffffffffffffffffffffffffffffffff1661157d61152a565b73ffffffffffffffffffffffffffffffffffffffff1663081812fc846040518263ffffffff1660e01b81526004016115b59190611b5b565b60206040518083038186803b1580156115cd57600080fd5b505afa1580156115e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611605919061168f565b73ffffffffffffffffffffffffffffffffffffffff16149050919050565b60008135905061163281611ef9565b92915050565b60008151905061164781611ef9565b92915050565b60008135905061165c81611f10565b92915050565b60006020828403121561167857611677611d4f565b5b600061168684828501611623565b91505092915050565b6000602082840312156116a5576116a4611d4f565b5b60006116b384828501611638565b91505092915050565b600080604083850312156116d3576116d2611d4f565b5b60006116e185828601611623565b92505060206116f28582860161164d565b9150509250929050565b60006020828403121561171257611711611d4f565b5b60006117208482850161164d565b91505092915050565b60008060006060848603121561174257611741611d4f565b5b60006117508682870161164d565b935050602061176186828701611623565b92505060406117728682870161164d565b9150509250925092565b6000806040838503121561179357611792611d4f565b5b60006117a18582860161164d565b92505060206117b28582860161164d565b9150509250929050565b6000806000606084860312156117d5576117d4611d4f565b5b60006117e38682870161164d565b93505060206117f48682870161164d565b92505060406118058682870161164d565b9150509250925092565b6000806000806080858703121561182957611828611d4f565b5b60006118378782880161164d565b94505060206118488782880161164d565b93505060406118598782880161164d565b925050606061186a8782880161164d565b91505092959194509250565b61187f81611c37565b82525050565b61188e81611c49565b82525050565b600061189f82611b91565b6118a98185611b9c565b93506118b9818560208601611c8c565b6118c281611d54565b840191505092915050565b60006118da600f83611b9c565b91506118e582611d65565b602082019050919050565b60006118fd600c83611b9c565b915061190882611d8e565b602082019050919050565b6000611920601283611b9c565b915061192b82611db7565b602082019050919050565b6000611943600d83611b9c565b915061194e82611de0565b602082019050919050565b6000611966602483611b9c565b915061197182611e09565b604082019050919050565b6000611989602583611b9c565b915061199482611e58565b604082019050919050565b60006119ac601283611b9c565b91506119b782611ea7565b602082019050919050565b60006119cf600e83611b9c565b91506119da82611ed0565b602082019050919050565b6119ee81611c75565b82525050565b6119fd81611c7f565b82525050565b6000602082019050611a186000830184611876565b92915050565b6000602082019050611a336000830184611885565b92915050565b60006020820190508181036000830152611a538184611894565b905092915050565b60006020820190508181036000830152611a74816118cd565b9050919050565b60006020820190508181036000830152611a94816118f0565b9050919050565b60006020820190508181036000830152611ab481611913565b9050919050565b60006020820190508181036000830152611ad481611936565b9050919050565b60006020820190508181036000830152611af481611959565b9050919050565b60006020820190508181036000830152611b148161197c565b9050919050565b60006020820190508181036000830152611b348161199f565b9050919050565b60006020820190508181036000830152611b54816119c2565b9050919050565b6000602082019050611b7060008301846119e5565b92915050565b6000602082019050611b8b60008301846119f4565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611bb882611c75565b9150611bc383611c75565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611bf857611bf7611cf1565b5b828201905092915050565b6000611c0e82611c75565b9150611c1983611c75565b925082821015611c2c57611c2b611cf1565b5b828203905092915050565b6000611c4282611c55565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015611caa578082015181840152602081019050611c8f565b83811115611cb9576000848401525b50505050565b60006002820490506001821680611cd757607f821691505b60208210811415611ceb57611cea611d20565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f42616c616e636520746f6f206c6f770000000000000000000000000000000000600082015250565b7f50617573652064656e6965640000000000000000000000000000000000000000600082015250565b7f4d696e74204163636573732044656e6965640000000000000000000000000000600082015250565b7f4d757374206265206f776e657200000000000000000000000000000000000000600082015250565b7f526571756573746564204275726e2067726561746572207468616e206170707260008201527f6f76616c00000000000000000000000000000000000000000000000000000000602082015250565b7f5472616e7366657220616d6f756e742067726561746572207468616e2061707060008201527f726f76616c000000000000000000000000000000000000000000000000000000602082015250565b7f436f6e7472616374206973207061757365640000000000000000000000000000600082015250565b7f556e70617573652064656e696564000000000000000000000000000000000000600082015250565b611f0281611c37565b8114611f0d57600080fd5b50565b611f1981611c75565b8114611f2457600080fd5b5056fea2646970667358221220237dcc466497fb32715e756db64f0e97fe00e0d51794c69b68ed98be61471a4564736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c806380f51c12116100c357806395d89b411161007c57806395d89b41146103b4578063983b2d56146103d25780639cc7f708146103ee578063b390c0ab1461041e578063b866c8a41461043a578063f46eccc41461046a5761014d565b806380f51c12146102cc5780638456cb59146102fc5780638769fd411461031a5780638856f779146103365780638da5cb5b1461036657806390dd2627146103845761014d565b80631b2ef1ca116101155780631b2ef1ca1461020a5780633092afd514610226578063313ce567146102425780633f4ba83a146102605780635c975abb1461027e578063756a86bd1461029c5761014d565b806306fdde03146101525780630c68efe3146101705780630d99bd6c1461018c57806313af4035146101bc57806318160ddd146101ec575b600080fd5b61015a61049a565b6040516101679190611a39565b60405180910390f35b61018a60048036038101906101859190611729565b610528565b005b6101a660048036038101906101a191906116bc565b6105c9565b6040516101b39190611b5b565b60405180910390f35b6101d660048036038101906101d19190611662565b6105ee565b6040516101e39190611a1e565b60405180910390f35b6101f461064b565b6040516102019190611b5b565b60405180910390f35b610224600480360381019061021f919061177c565b610651565b005b610240600480360381019061023b9190611662565b61073a565b005b61024a6107d4565b6040516102579190611b76565b60405180910390f35b6102686107d9565b6040516102759190611a1e565b60405180910390f35b610286610876565b6040516102939190611a1e565b60405180910390f35b6102b660048036038101906102b1919061177c565b610889565b6040516102c39190611b5b565b60405180910390f35b6102e660048036038101906102e19190611662565b6108ae565b6040516102f39190611a1e565b60405180910390f35b6103046108ce565b6040516103119190611a1e565b60405180910390f35b610334600480360381019061032f919061177c565b61096b565b005b610350600480360381019061034b919061180f565b610ac1565b60405161035d9190611a1e565b60405180910390f35b61036e610c18565b60405161037b9190611a03565b60405180910390f35b61039e600480360381019061039991906117bc565b610c3c565b6040516103ab9190611a1e565b60405180910390f35b6103bc610ce4565b6040516103c99190611a39565b60405180910390f35b6103ec60048036038101906103e79190611662565b610d72565b005b610408600480360381019061040391906116fc565b610e0c565b6040516104159190611b5b565b60405180910390f35b6104386004803603810190610433919061177c565b610e24565b005b610454600480360381019061044f91906117bc565b610ec2565b6040516104619190611a1e565b60405180910390f35b610484600480360381019061047f9190611662565b610f79565b6040516104919190611a1e565b60405180910390f35b600280546104a790611cbf565b80601f01602080910402602001604051908101604052809291908181526020018280546104d390611cbf565b80156105205780601f106104f557610100808354040283529160200191610520565b820191906000526020600020905b81548152906001019060200180831161050357829003601f168201915b505050505081565b610530610f99565b15610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056790611b1b565b60405180910390fd5b61057983610fb7565b6105b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105af90611abb565b60405180910390fd5b6105c383838361107e565b50505050565b6007602052816000526040600020602052806000526040600020600091509150505481565b60006105f93361112f565b610638576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062f90611abb565b60405180910390fd5b61064182611187565b5060019050919050565b60045481565b610659610f99565b15610699576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069090611b1b565b60405180910390fd5b60011515600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461072c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072390611a9b565b60405180910390fd5b61073682826111d2565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bf90611abb565b60405180910390fd5b6107d18161126d565b50565b601281565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085e90611b3b565b60405180910390fd5b61086f6112c8565b6001905090565b600060149054906101000a900460ff1681565b6006602052816000526040600020602052806000526040600020600091509150505481565b60016020528060005260406000206000915054906101000a900460ff1681565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661095c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095390611a7b565b60405180910390fd5b6109646112e4565b6001905090565b610973610f99565b156109b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109aa90611b1b565b60405180910390fd5b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080821115610a4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4290611adb565b60405180910390fd5b610a558383611301565b610a6882826113df90919063ffffffff16565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002081905550505050565b6000610acb610f99565b15610b0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0290611b1b565b60405180910390fd5b610b14856113f5565b610b53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4a90611abb565b60405180910390fd5b6000859050600060066000878152602001908152602001600020600083815260200190815260200160002054905080841115610bc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bbb90611afb565b60405180910390fd5b610bcf868686611417565b610be284826113df90919063ffffffff16565b60066000888152602001908152602001600020600084815260200190815260200160002081905550600192505050949350505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610c46610f99565b15610c86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7d90611b1b565b60405180910390fd5b610c8f846113f5565b610cce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc590611abb565b60405180910390fd5b610cd9848484611417565b600190509392505050565b60038054610cf190611cbf565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1d90611cbf565b8015610d6a5780601f10610d3f57610100808354040283529160200191610d6a565b820191906000526020600020905b815481529060010190602001808311610d4d57829003601f168201915b505050505081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df790611abb565b60405180910390fd5b610e09816114cf565b50565b60056020528060005260406000206000915090505481565b610e2c610f99565b15610e6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6390611b1b565b60405180910390fd5b610e7582610fb7565b610eb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eab90611abb565b60405180910390fd5b610ebe8282611301565b5050565b6000610ecd846113f5565b610f0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0390611abb565b60405180910390fd5b816006600086815260200190815260200160002060008581526020019081526020016000208190555082847f93e4f1223795b575c8b108c82d62e117c59e8486f9ca2f3b1b237749c646747884604051610f669190611b5b565b60405180910390a3600190509392505050565b60086020528060005260406000206000915054906101000a900460ff1681565b600060011515600060149054906101000a900460ff16151514905090565b60003373ffffffffffffffffffffffffffffffffffffffff16610fd861152a565b73ffffffffffffffffffffffffffffffffffffffff16636352211e846040518263ffffffff1660e01b81526004016110109190611b5b565b60206040518083038186803b15801561102857600080fd5b505afa15801561103c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611060919061168f565b73ffffffffffffffffffffffffffffffffffffffff16149050919050565b600081600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff16847f25513def906e48f9e4a3b482e5ff228d356d8dda4744112c24c666c2d270fbeb8460405161111c9190611b5b565b60405180910390a3600190509392505050565b60008173ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b6000600560008481526020019081526020016000205490506111ff8260045461154690919063ffffffff16565b600481905550611218828261154690919063ffffffff16565b600560008581526020019081526020016000208190555082837f070aa035fe0a09f0d9305bdc2d7a5d93cd4733db3b1ff869b4a7033c9501909a846040516112609190611b5b565b60405180910390a3505050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60008060146101000a81548160ff021916908315150217905550565b6001600060146101000a81548160ff021916908315150217905550565b6000600560008481526020019081526020016000205490508181101561135c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135390611a5b565b60405180910390fd5b611371826004546113df90919063ffffffff16565b60048190555061138a82826113df90919063ffffffff16565b600560008581526020019081526020016000208190555082837f5af801e983cfd842de8b0797a2d6077db3ac2dea16571e0c7f5080291ca1b934846040516113d29190611b5b565b60405180910390a3505050565b600081836113ed9190611c03565b905092915050565b60006114008261155c565b80611410575061140f82610fb7565b5b9050919050565b61143d8160056000868152602001908152602001600020546113df90919063ffffffff16565b600560008581526020019081526020016000208190555061147a81600560008581526020019081526020016000205461154690919063ffffffff16565b600560008481526020019081526020016000208190555081837faf6151f5085accf2d57e1e7bf7601d3b3982e0de7e9a90f032f8554de9c104f6836040516114c29190611b5b565b60405180910390a3505050565b6001600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600073ce761d788df608bd21bdd59d6f4b54b2e27f25bb905090565b600081836115549190611bad565b905092915050565b60003373ffffffffffffffffffffffffffffffffffffffff1661157d61152a565b73ffffffffffffffffffffffffffffffffffffffff1663081812fc846040518263ffffffff1660e01b81526004016115b59190611b5b565b60206040518083038186803b1580156115cd57600080fd5b505afa1580156115e1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611605919061168f565b73ffffffffffffffffffffffffffffffffffffffff16149050919050565b60008135905061163281611ef9565b92915050565b60008151905061164781611ef9565b92915050565b60008135905061165c81611f10565b92915050565b60006020828403121561167857611677611d4f565b5b600061168684828501611623565b91505092915050565b6000602082840312156116a5576116a4611d4f565b5b60006116b384828501611638565b91505092915050565b600080604083850312156116d3576116d2611d4f565b5b60006116e185828601611623565b92505060206116f28582860161164d565b9150509250929050565b60006020828403121561171257611711611d4f565b5b60006117208482850161164d565b91505092915050565b60008060006060848603121561174257611741611d4f565b5b60006117508682870161164d565b935050602061176186828701611623565b92505060406117728682870161164d565b9150509250925092565b6000806040838503121561179357611792611d4f565b5b60006117a18582860161164d565b92505060206117b28582860161164d565b9150509250929050565b6000806000606084860312156117d5576117d4611d4f565b5b60006117e38682870161164d565b93505060206117f48682870161164d565b92505060406118058682870161164d565b9150509250925092565b6000806000806080858703121561182957611828611d4f565b5b60006118378782880161164d565b94505060206118488782880161164d565b93505060406118598782880161164d565b925050606061186a8782880161164d565b91505092959194509250565b61187f81611c37565b82525050565b61188e81611c49565b82525050565b600061189f82611b91565b6118a98185611b9c565b93506118b9818560208601611c8c565b6118c281611d54565b840191505092915050565b60006118da600f83611b9c565b91506118e582611d65565b602082019050919050565b60006118fd600c83611b9c565b915061190882611d8e565b602082019050919050565b6000611920601283611b9c565b915061192b82611db7565b602082019050919050565b6000611943600d83611b9c565b915061194e82611de0565b602082019050919050565b6000611966602483611b9c565b915061197182611e09565b604082019050919050565b6000611989602583611b9c565b915061199482611e58565b604082019050919050565b60006119ac601283611b9c565b91506119b782611ea7565b602082019050919050565b60006119cf600e83611b9c565b91506119da82611ed0565b602082019050919050565b6119ee81611c75565b82525050565b6119fd81611c7f565b82525050565b6000602082019050611a186000830184611876565b92915050565b6000602082019050611a336000830184611885565b92915050565b60006020820190508181036000830152611a538184611894565b905092915050565b60006020820190508181036000830152611a74816118cd565b9050919050565b60006020820190508181036000830152611a94816118f0565b9050919050565b60006020820190508181036000830152611ab481611913565b9050919050565b60006020820190508181036000830152611ad481611936565b9050919050565b60006020820190508181036000830152611af481611959565b9050919050565b60006020820190508181036000830152611b148161197c565b9050919050565b60006020820190508181036000830152611b348161199f565b9050919050565b60006020820190508181036000830152611b54816119c2565b9050919050565b6000602082019050611b7060008301846119e5565b92915050565b6000602082019050611b8b60008301846119f4565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611bb882611c75565b9150611bc383611c75565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611bf857611bf7611cf1565b5b828201905092915050565b6000611c0e82611c75565b9150611c1983611c75565b925082821015611c2c57611c2b611cf1565b5b828203905092915050565b6000611c4282611c55565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b83811015611caa578082015181840152602081019050611c8f565b83811115611cb9576000848401525b50505050565b60006002820490506001821680611cd757607f821691505b60208210811415611ceb57611cea611d20565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f42616c616e636520746f6f206c6f770000000000000000000000000000000000600082015250565b7f50617573652064656e6965640000000000000000000000000000000000000000600082015250565b7f4d696e74204163636573732044656e6965640000000000000000000000000000600082015250565b7f4d757374206265206f776e657200000000000000000000000000000000000000600082015250565b7f526571756573746564204275726e2067726561746572207468616e206170707260008201527f6f76616c00000000000000000000000000000000000000000000000000000000602082015250565b7f5472616e7366657220616d6f756e742067726561746572207468616e2061707060008201527f726f76616c000000000000000000000000000000000000000000000000000000602082015250565b7f436f6e7472616374206973207061757365640000000000000000000000000000600082015250565b7f556e70617573652064656e696564000000000000000000000000000000000000600082015250565b611f0281611c37565b8114611f0d57600080fd5b50565b611f1981611c75565b8114611f2457600080fd5b5056fea2646970667358221220237dcc466497fb32715e756db64f0e97fe00e0d51794c69b68ed98be61471a4564736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 687,
        "contract": "contracts/crops/Corn.sol:Corn",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 727,
        "contract": "contracts/crops/Corn.sol:Corn",
        "label": "paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 731,
        "contract": "contracts/crops/Corn.sol:Corn",
        "label": "pausers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 860,
        "contract": "contracts/crops/Corn.sol:Corn",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 862,
        "contract": "contracts/crops/Corn.sol:Corn",
        "label": "symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 865,
        "contract": "contracts/crops/Corn.sol:Corn",
        "label": "totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 872,
        "contract": "contracts/crops/Corn.sol:Corn",
        "label": "balanceOf",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 878,
        "contract": "contracts/crops/Corn.sol:Corn",
        "label": "transferAllowance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 326,
        "contract": "contracts/crops/Corn.sol:Corn",
        "label": "burnAllowance",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 614,
        "contract": "contracts/crops/Corn.sol:Corn",
        "label": "minters",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}