{
  "language": "Solidity",
  "sources": {
    "contracts/abstracts/NewFarm.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IRarity {\n  function adventure(uint256) external;\n}\n\ninterface IResource {\n  function mint(uint256 summoner, uint256 amount) external;\n}\n\nabstract contract NewFarm {\n  IRarity constant rarity = IRarity(0xce761D788DF608BD21bdd59d6f4B54b2e27F25Bb);\n\n  struct FarmAttributes {\n    bool paused;\n    address owner;\n    address disaster;\n    IResource[4] resources;\n    uint256[4] multipliers;\n  }\n\n  FarmAttributes public attributes;\n\n  mapping(address => bool) public pausers;\n\n  // Events\n  event FarmResource(\n    uint256 indexed _summoner,\n    address _resource,\n    uint256 _amount\n  );\n\n  constructor(\n    address _one,\n    address _two,\n    address _three,\n    address _four\n  ) {\n    attributes.resources = [\n      IResource(_one),\n      IResource(_two),\n      IResource(_three),\n      IResource(_four)\n    ];\n    attributes.disaster = address(0);\n    attributes.owner = msg.sender;\n    attributes.paused = false;\n    attributes.multipliers = [3, 3, 3, 3];\n  }\n\n  function farm(uint256 summoner, uint256 id) external {\n    require(id < 4, \"Invalid Id\");\n    if (id == 0) {\n      _farm(summoner, attributes.resources[id], attributes.multipliers[id]);\n    } else if (id == 1) {\n      _farm(summoner, attributes.resources[id], attributes.multipliers[id]);\n    } else if (id == 2) {\n      _farm(summoner, attributes.resources[id], attributes.multipliers[id]);\n    } else if (id == 3) {\n      _farm(summoner, attributes.resources[id], attributes.multipliers[id]);\n    }\n  }\n\n  function pause() external {\n    require(_isOwner(msg.sender) || pausers[msg.sender], \"Must be owner\");\n    attributes.paused = true;\n  }\n\n  function unpause() external {\n    require(_isOwner(msg.sender) || pausers[msg.sender], \"Must be owner\");\n    attributes.paused = false;\n  }\n\n  function addPauser(address addr) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    pausers[addr] = true;\n  }\n\n  function isPaused() external view returns (bool) {\n    return attributes.paused;\n  }\n\n  function removePauser(address addr) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    pausers[addr] = false;\n  }\n\n  function getMultipliers() external view returns (uint256[4] memory) {\n    return attributes.multipliers;\n  }\n\n  function setMultipliers(\n    uint8 _one,\n    uint8 _two,\n    uint8 _three,\n    uint8 _four\n  ) external {\n    attributes.multipliers = [_one, _two, _three, _four];\n  }\n\n  function getOwner() external view returns (address) {\n    return attributes.owner;\n  }\n\n  function setOwner(address _owner) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    attributes.owner = _owner;\n  }\n\n  function getDisaster() external view returns (address) {\n    return attributes.disaster;\n  }\n\n  function setDisaster(address _addr) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    pausers[_addr] = true;\n    attributes.disaster = _addr;\n    attributes.paused = true;\n  }\n\n  function clearDisaster() external {\n    require(\n      _isOwner(msg.sender) || attributes.disaster == msg.sender,\n      \"Must be owner or disaster\"\n    );\n    pausers[msg.sender] = false;\n    attributes.disaster = address(0);\n    attributes.paused = false;\n  }\n\n  function _isOwner(address addr) internal view returns (bool) {\n    return attributes.owner == addr;\n  }\n\n  function _farm(\n    uint256 _summoner,\n    IResource _resource,\n    uint256 _multiplier\n  ) internal {\n    require(!attributes.paused, \"Farm not available\");\n    rarity.adventure(_summoner);\n    uint256 amount = _multiplier * 1e18;\n    _resource.mint(_summoner, amount);\n    emit FarmResource(_summoner, address(_resource), amount);\n  }\n}\n"
    },
    "contracts/farms/veggie/VeggieFarm.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../../abstracts/NewFarm.sol\";\n\ncontract VeggieFarm is NewFarm {\n  constructor(\n    address _carrot,\n    address _onion,\n    address _potato,\n    address _tomato\n  ) NewFarm(_carrot, _onion, _potato, _tomato) {}\n}\n"
    },
    "contracts/farms/grain/GrainFarm.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../../abstracts/NewFarm.sol\";\n\ncontract GrainFarm is NewFarm {\n  constructor(\n    address _barley,\n    address _bean,\n    address _corn,\n    address _wheat\n  ) NewFarm(_barley, _bean, _corn, _wheat) {}\n}\n"
    },
    "contracts/farms/fruit/FruitFarm.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../../abstracts/NewFarm.sol\";\n\ncontract FruitFarm is NewFarm {\n  constructor(\n    address _apple,\n    address _banana,\n    address _peach,\n    address _strawberry\n  ) NewFarm(_apple, _banana, _peach, _strawberry) {}\n}\n"
    },
    "contracts/abstracts/Resource.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IRarity {\n  function isApprovedForAll(address owner, address operator)\n    external\n    view\n    returns (bool);\n\n  function ownerOf(uint256) external view returns (address);\n\n  function getApproved(uint256) external view returns (address);\n}\n\nabstract contract Resource {\n  struct ResourceAttributes {\n    bool locked;\n    bool paused;\n    uint8 weight;\n    address owner;\n    uint8[3] pointIncreasers;\n    uint8[3] pointDecreasers;\n    uint8[6] abilityIncreasers;\n    uint8[6] abilityDecreasers;\n  }\n\n  uint8 public constant _decimals = 18;\n  string _name;\n  string _symbol;\n  uint256 public _totalSupply;\n\n  ResourceAttributes public attributes;\n  IRarity rarity = IRarity(0xce761D788DF608BD21bdd59d6f4B54b2e27F25Bb);\n\n  //Mappings\n  mapping(address => bool) public minters;\n  mapping(uint256 => uint256) public _balanceOf;\n  mapping(uint256 => mapping(uint256 => uint256)) public _transferAllowance;\n  mapping(address => mapping(uint256 => uint256)) public burnAllowance;\n\n  // EVENTS\n  event Burn(uint256 indexed from, uint256 indexed to, uint256 amount);\n  event BurnApproval(uint256 indexed from, address indexed to, uint256 amount);\n  event Mint(address indexed from, uint256 indexed to, uint256 amount);\n  event Transfer(uint256 indexed from, uint256 indexed to, uint256 amount);\n  event Approval(uint256 indexed from, uint256 indexed to, uint256 amount);\n\n  constructor() {\n    attributes.owner = msg.sender;\n    attributes.paused = false;\n    attributes.locked = false;\n  }\n\n  function lock() external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    attributes.locked = true;\n  }\n\n  function isLocked() external view returns (bool) {\n    return attributes.locked;\n  }\n\n  function isPaused() external view returns (bool) {\n    return attributes.paused;\n  }\n\n  function pause() external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    attributes.paused = true;\n  }\n\n  function unpause() external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    attributes.paused = false;\n  }\n\n  function _isLocked() internal view returns (bool) {\n    return attributes.locked == true;\n  }\n\n  function mint(uint256 summoner, uint256 amount) external {\n    // require(!attributes.paused, \"Contract is paused\");\n    // require(minters[msg.sender] == true, \"Mint Access Denied\");\n    _totalSupply += amount;\n    _balanceOf[summoner] += amount;\n    // emit Mint(msg.sender, summoner, amount);\n  }\n\n  function addMinter(address minter) external {\n    require(msg.sender == attributes.owner, \"Must be owner\");\n    minters[minter] = true;\n  }\n\n  function removeMinter(address minter) external {\n    require(msg.sender == attributes.owner, \"Must be owner\");\n    minters[minter] = false;\n  }\n\n  function burn(uint256 summoner, uint256 amount) external {\n    require(!attributes.paused, \"Contract is paused\");\n    require(_isRarityOwner(summoner), \"Must be owner\");\n    _totalSupply -= amount;\n    _balanceOf[summoner] -= amount;\n    emit Burn(summoner, summoner, amount);\n  }\n\n  function burnFrom(uint256 summoner, uint256 amount) external {\n    require(!attributes.paused, \"Contract is paused\");\n    require(amount <= burnAllowance[msg.sender][summoner], \"Burn > Approve\");\n    _totalSupply -= amount;\n    _balanceOf[summoner] -= amount;\n    burnAllowance[msg.sender][summoner] -= amount;\n    emit Burn(summoner, summoner, amount);\n  }\n\n  function burnApprove(\n    uint256 summoner,\n    address burner,\n    uint256 amount\n  ) external {\n    require(!attributes.paused, \"Contract is paused\");\n    require(_isRarityOwner(summoner), \"Must be owner\");\n    burnAllowance[burner][summoner] = amount;\n    emit BurnApproval(summoner, burner, amount);\n  }\n\n  function setPointIncreasers(\n    uint8 hp,\n    uint8 mp,\n    uint8 stamina\n  ) external {\n    require(!_isLocked(), \"Resource Locked\");\n    require(_isOwner(msg.sender), \"Must be owner\");\n    attributes.pointIncreasers = [hp, mp, stamina];\n  }\n\n  function setPointDecreasers(\n    uint8 hp,\n    uint8 mp,\n    uint8 stamina\n  ) external {\n    require(!_isLocked(), \"Resource Locked\");\n    require(_isOwner(msg.sender), \"Must be owner\");\n    attributes.pointDecreasers = [hp, mp, stamina];\n  }\n\n  function setAbilityIncreasers(\n    uint8 str,\n    uint8 dex,\n    uint8 con,\n    uint8 inte,\n    uint8 wis,\n    uint8 char\n  ) external {\n    require(!_isLocked(), \"Resource Locked\");\n    require(_isOwner(msg.sender), \"Must be owner\");\n    attributes.abilityIncreasers = [str, dex, con, inte, wis, char];\n  }\n\n  function setAbilityDecreasers(\n    uint8 str,\n    uint8 dex,\n    uint8 con,\n    uint8 inte,\n    uint8 wis,\n    uint8 char\n  ) external {\n    require(!_isLocked(), \"Resource Locked\");\n    require(_isOwner(msg.sender), \"Must be owner\");\n    attributes.abilityDecreasers = [str, dex, con, inte, wis, char];\n  }\n\n  function getWeight() external view returns (uint8) {\n    return attributes.weight;\n  }\n\n  function setWeight(uint8 _weight) external {\n    require(!_isLocked(), \"Resource Locked\");\n    require(_isOwner(msg.sender), \"Must be owner\");\n    attributes.weight = _weight;\n  }\n\n  function getAbilityIncreasers() external view returns (uint8[6] memory) {\n    return attributes.abilityIncreasers;\n  }\n\n  function getAbilityDecreasers() external view returns (uint8[6] memory) {\n    return attributes.abilityDecreasers;\n  }\n\n  function getPointIncreasers() external view returns (uint8[3] memory) {\n    return attributes.pointIncreasers;\n  }\n\n  function getPointDecreasers() external view returns (uint8[3] memory) {\n    return attributes.pointDecreasers;\n  }\n\n  function getOwner() external view returns (address) {\n    return attributes.owner;\n  }\n\n  function setOwner(address _owner) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    attributes.owner = _owner;\n  }\n\n  function _isOwner(address addr) internal view returns (bool) {\n    return attributes.owner == addr;\n  }\n\n  // ERC 20 Stuff\n  function name() external view returns (string memory) {\n    return _name;\n  }\n\n  function symbol() external view returns (string memory) {\n    return _symbol;\n  }\n\n  function decimals() external pure returns (uint8) {\n    return _decimals;\n  }\n\n  function totalSupply() external view returns (uint256) {\n    return _totalSupply;\n  }\n\n  function balanceOf(uint256 owner) external view returns (uint256) {\n    return _balanceOf[owner];\n  }\n\n  function allowance(uint256 owner, uint256 spender)\n    external\n    view\n    returns (uint256)\n  {\n    return _transferAllowance[owner][spender];\n  }\n\n  function approve(\n    uint256 from,\n    uint256 spender,\n    uint256 amount\n  ) external returns (bool) {\n    require(_isRarityApprovedOrOwner(from), \"Must be owner\");\n    _transferAllowance[from][spender] = amount;\n    emit Approval(from, spender, amount);\n    return true;\n  }\n\n  function transfer(\n    uint256 from,\n    uint256 to,\n    uint256 amount\n  ) external returns (bool) {\n    require(!attributes.paused, \"Contract is paused\");\n    require(_isRarityApprovedOrOwner(from), \"Must be owner\");\n    _transferTokens(from, to, amount);\n    return true;\n  }\n\n  function transferFrom(\n    uint256 executor,\n    uint256 from,\n    uint256 to,\n    uint256 amount\n  ) external returns (bool) {\n    require(!attributes.paused, \"Contract is paused\");\n    require(_isRarityApprovedOrOwner(executor), \"Must be owner\");\n    require(amount <= _transferAllowance[from][executor], \"Transfer > Approve\");\n    _transferTokens(from, to, amount);\n    _transferAllowance[from][executor] -= amount;\n    return true;\n  }\n\n  function _transferTokens(\n    uint256 from,\n    uint256 to,\n    uint256 amount\n  ) internal {\n    _balanceOf[from] -= amount;\n    _balanceOf[to] += amount;\n    emit Transfer(from, to, amount);\n  }\n\n  function _isRarityOwner(uint256 _summoner) internal view returns (bool) {\n    return rarity.ownerOf(_summoner) == msg.sender;\n  }\n\n  function _isRarityApproved(uint256 _summoner) internal view returns (bool) {\n    return\n      rarity.getApproved(_summoner) == msg.sender ||\n      rarity.isApprovedForAll(rarity.ownerOf(_summoner), msg.sender);\n  }\n\n  function _isRarityApprovedOrOwner(uint256 _summoner)\n    internal\n    view\n    returns (bool)\n  {\n    return _isRarityApproved(_summoner) || _isRarityOwner(_summoner);\n  }\n}\n"
    },
    "contracts/mill/Oil.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Resource.sol\";\n\ncontract Oil is Resource {\n  constructor() Resource() {\n    _name = \"Oil\";\n    _symbol = \"OIL\";\n\n    attributes.weight = 5;\n  }\n}\n"
    },
    "contracts/mill/Meal.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Resource.sol\";\n\ncontract Meal is Resource {\n  constructor() Resource() {\n    _name = \"Meal\";\n    _symbol = \"MEAL\";\n\n    attributes.weight = 5;\n  }\n}\n"
    },
    "contracts/mill/Malt.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Resource.sol\";\n\ncontract Malt is Resource {\n  constructor() Resource() {\n    _name = \"Malt\";\n    _symbol = \"MALT\";\n\n    attributes.weight = 5;\n  }\n}\n"
    },
    "contracts/mill/Flour.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Resource.sol\";\n\ncontract Flour is Resource {\n  constructor() Resource() {\n    _name = \"Flour\";\n    _symbol = \"FLOUR\";\n\n    attributes.weight = 5;\n  }\n}\n"
    },
    "contracts/farms/veggie/Tomato.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../../abstracts/Resource.sol\";\n\ncontract Tomato is Resource {\n  constructor() Resource() {\n    _name = \"Tomato\";\n    _symbol = \"TOMATO\";\n\n    attributes.weight = 4;\n    attributes.pointIncreasers = [1, 0, 0];\n  }\n}\n"
    },
    "contracts/farms/veggie/Potato.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../../abstracts/Resource.sol\";\n\ncontract Potato is Resource {\n  constructor() Resource() {\n    _name = \"Potato\";\n    _symbol = \"POTATO\";\n\n    attributes.weight = 6;\n    attributes.pointIncreasers = [1, 0, 0];\n  }\n}\n"
    },
    "contracts/farms/veggie/Onion.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../../abstracts/Resource.sol\";\n\ncontract Onion is Resource {\n  constructor() Resource() {\n    _name = \"Onion\";\n    _symbol = \"ONION\";\n\n    attributes.weight = 7;\n    attributes.pointIncreasers = [0, 0, 1];\n  }\n}\n"
    },
    "contracts/farms/veggie/Carrot.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../../abstracts/Resource.sol\";\n\ncontract Carrot is Resource {\n  constructor() Resource() {\n    _name = \"Carrot\";\n    _symbol = \"CARROT\";\n\n    attributes.weight = 2;\n    attributes.pointIncreasers = [0, 1, 0];\n  }\n}\n"
    },
    "contracts/farms/fruit/Strawberry.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../../abstracts/Resource.sol\";\n\ncontract Strawberry is Resource {\n  constructor() Resource() {\n    _name = \"Strawberry\";\n    _symbol = \"STRAWBERRY\";\n\n    attributes.weight = 1;\n    attributes.pointIncreasers = [1, 0, 0];\n  }\n}\n"
    },
    "contracts/farms/fruit/Peach.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../../abstracts/Resource.sol\";\n\ncontract Peach is Resource {\n  constructor() Resource() {\n    _name = \"Peach\";\n    _symbol = \"PEACH\";\n\n    attributes.weight = 6;\n    attributes.pointIncreasers = [1, 0, 0];\n  }\n}\n"
    },
    "contracts/farms/fruit/Bananna.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../../abstracts/Resource.sol\";\n\ncontract Banana is Resource {\n  constructor() Resource() {\n    _name = \"Banana\";\n    _symbol = \"BANANA\";\n\n    attributes.weight = 7;\n    attributes.pointIncreasers = [0, 0, 1];\n  }\n}\n"
    },
    "contracts/farms/fruit/Apple.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../../abstracts/Resource.sol\";\n\ncontract Apple is Resource {\n  constructor() Resource() {\n    _name = \"Apple\";\n    _symbol = \"APPLE\";\n\n    attributes.weight = 8;\n    attributes.pointIncreasers = [0, 1, 0];\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}