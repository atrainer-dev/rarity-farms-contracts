{
  "language": "Solidity",
  "sources": {
    "contracts/abstracts/Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./RERC20.sol\";\n\nabstract contract RarityBurnable is RERC20 {\n  mapping(address => mapping(uint256 => uint256)) public burnAllowance;\n\n  event Burn(uint256 indexed from, uint256 indexed to, uint256 amount);\n  event BurnApproval(uint256 indexed from, address indexed to, uint256 amount);\n\n  function _burnApprove(\n    uint256 from,\n    address burner,\n    uint256 amount\n  ) internal returns (bool) {\n    burnAllowance[burner][from] = amount;\n    emit BurnApproval(from, burner, amount);\n    return true;\n  }\n\n  function _burn(uint256 dst, uint256 amount) internal {\n    uint256 balance = _balanceOf[dst];\n    require(balance >= amount, \"Balance too low\");\n    _totalSupply -= amount;\n    _balanceOf[dst] = balance - amount;\n    emit Burn(dst, dst, amount);\n  }\n}\n"
    },
    "contracts/abstracts/RERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./Rarity.sol\";\nimport \"./Ownable.sol\";\nimport \"./Pausable.sol\";\n\ninterface IRarityFungible {\n  event Transfer(uint256 indexed from, uint256 indexed to, uint256 amount);\n  event Approval(uint256 indexed from, uint256 indexed to, uint256 amount);\n\n  function name() external view returns (string memory);\n\n  function symbol() external view returns (string memory);\n\n  function decimals() external view returns (uint8);\n\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(uint256 owner) external view returns (uint256);\n\n  function allowance(uint256 owner, uint256 spender)\n    external\n    view\n    returns (uint256);\n\n  function approve(\n    uint256 from,\n    uint256 spender,\n    uint256 amount\n  ) external returns (bool);\n\n  function transfer(\n    uint256 from,\n    uint256 to,\n    uint256 amount\n  ) external returns (bool);\n\n  function transferFrom(\n    uint256 executor,\n    uint256 from,\n    uint256 to,\n    uint256 amount\n  ) external returns (bool);\n}\n\nabstract contract RERC20 is IRarityFungible, Rarity, Ownable, Pausable {\n  string _name;\n  string _symbol;\n  uint256 public _totalSupply = 0;\n  uint8 public constant _decimals = 18;\n\n  mapping(uint256 => uint256) public _balanceOf;\n  mapping(uint256 => mapping(uint256 => uint256)) public _transferAllowance;\n\n  constructor() Rarity() Ownable() Pausable() {}\n\n  function name() external view override returns (string memory) {\n    return _name;\n  }\n\n  function symbol() external view override returns (string memory) {\n    return _symbol;\n  }\n\n  function decimals() external view override returns (uint8) {\n    return _decimals;\n  }\n\n  function totalSupply() external view override returns (uint256) {\n    return _totalSupply;\n  }\n\n  function balanceOf(uint256 owner) external view override returns (uint256) {\n    return _balanceOf[owner];\n  }\n\n  function allowance(uint256 owner, uint256 spender)\n    external\n    view\n    override\n    returns (uint256)\n  {\n    return _transferAllowance[owner][spender];\n  }\n\n  function approve(\n    uint256 from,\n    uint256 spender,\n    uint256 amount\n  ) external override returns (bool) {\n    require(_isRarityApprovedOrOwner(from), \"Must be owner\");\n    _transferAllowance[from][spender] = amount;\n\n    emit Approval(from, spender, amount);\n    return true;\n  }\n\n  function transfer(\n    uint256 from,\n    uint256 to,\n    uint256 amount\n  ) external override returns (bool) {\n    require(!_isPaused(), \"Contract is paused\");\n    require(_isRarityApprovedOrOwner(from), \"Must be owner\");\n    _transferTokens(from, to, amount);\n    return true;\n  }\n\n  function transferFrom(\n    uint256 executor,\n    uint256 from,\n    uint256 to,\n    uint256 amount\n  ) external override returns (bool) {\n    require(!_isPaused(), \"Contract is paused\");\n    require(_isRarityApprovedOrOwner(executor), \"Must be owner\");\n    uint256 spender = executor;\n    uint256 allow = _transferAllowance[from][spender];\n    require(amount <= allow, \"Transfer amount greater than approval\");\n    _transferTokens(from, to, amount);\n    _transferAllowance[from][spender] = allow - amount;\n    return true;\n  }\n\n  function _transferTokens(\n    uint256 from,\n    uint256 to,\n    uint256 amount\n  ) internal {\n    _balanceOf[from] -= amount;\n    _balanceOf[to] += amount;\n\n    emit Transfer(from, to, amount);\n  }\n\n  function setOwner(address _owner) external returns (bool) {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    _setOwner(_owner);\n    return true;\n  }\n}\n"
    },
    "contracts/abstracts/Rarity.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IRarity {\n  function level(uint256) external view returns (uint256);\n\n  function getApproved(uint256) external view returns (address);\n\n  function isApprovedForAll(address owner, address operator)\n    external\n    view\n    returns (bool);\n\n  function ownerOf(uint256) external view returns (address);\n\n  function summoner(uint256)\n    external\n    view\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    );\n\n  function adventure(uint256) external;\n}\n\ninterface IRarityAttributes {\n  function ability_scores(uint256)\n    external\n    view\n    returns (\n      uint32,\n      uint32,\n      uint32,\n      uint32,\n      uint32,\n      uint32\n    );\n}\n\ninterface IRarityRandomCodex {\n  function d20(uint256) external view returns (uint256);\n}\n\nabstract contract Rarity {\n  IRarity constant _rm = IRarity(0xce761D788DF608BD21bdd59d6f4B54b2e27F25Bb);\n  IRarityAttributes constant _attr =\n    IRarityAttributes(0xB5F5AF1087A8DA62A23b08C00C6ec9af21F397a1);\n  IRarityRandomCodex constant _random =\n    IRarityRandomCodex(0x7426dBE5207C2b5DaC57d8e55F0959fcD99661D4);\n\n  constructor() {}\n\n  function _isRarityOwner(uint256 _summoner) internal view returns (bool) {\n    return _rm.ownerOf(_summoner) == msg.sender;\n  }\n\n  function _isRarityApproved(uint256 _summoner) internal view returns (bool) {\n    return\n      _rm.getApproved(_summoner) == msg.sender ||\n      _rm.isApprovedForAll(_rm.ownerOf(_summoner), msg.sender);\n  }\n\n  function _isRarityApprovedOrOwner(uint256 _summoner)\n    internal\n    view\n    returns (bool)\n  {\n    return _isRarityApproved(_summoner) || _isRarityOwner(_summoner);\n  }\n\n  function _getRarity() internal pure returns (IRarity) {\n    return _rm;\n  }\n\n  function _getRarityAttributes() internal pure returns (IRarityAttributes) {\n    return _attr;\n  }\n\n  function _getRarityRandom() internal pure returns (IRarityRandomCodex) {\n    return _random;\n  }\n\n  function _getSummonerAttributes(uint256 _summoner)\n    internal\n    view\n    returns (uint32[6] memory)\n  {\n    (\n      uint32 _str,\n      uint32 _dex,\n      uint32 _con,\n      uint32 _int,\n      uint32 _wis,\n      uint32 _cha\n    ) = _attr.ability_scores(_summoner);\n    uint32[6] memory scores = [_str, _dex, _con, _int, _wis, _cha];\n    return scores;\n  }\n\n  function _getSummoner(uint256 _summoner)\n    internal\n    view\n    returns (uint256[4] memory)\n  {\n    (uint256 _xp, uint256 _log, uint256 _class, uint256 _level) = _rm.summoner(\n      _summoner\n    );\n    uint256[4] memory result = [_xp, _log, _class, _level];\n    return result;\n  }\n}\n"
    },
    "contracts/abstracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nabstract contract Ownable {\n  address public owner;\n\n  constructor() {\n    owner = msg.sender;\n  }\n\n  function _isOwner(address addr) internal view returns (bool) {\n    return owner == addr;\n  }\n\n  function _setOwner(address addr) internal returns (bool) {\n    owner = addr;\n    return true;\n  }\n}\n"
    },
    "contracts/abstracts/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nabstract contract Pausable {\n  bool public paused;\n  mapping(address => bool) public pausers;\n\n  constructor() {\n    paused = false;\n    pausers[msg.sender] = true;\n  }\n\n  function _isPaused() internal view returns (bool) {\n    return paused == true;\n  }\n\n  function pause() external returns (bool) {\n    require(pausers[msg.sender], \"Pause denied\");\n    _pause();\n    return true;\n  }\n\n  function unpause() external returns (bool) {\n    require(pausers[msg.sender], \"Unpause denied\");\n    _unpause();\n    return true;\n  }\n\n  function _addPauser(address addr) internal returns (bool) {\n    pausers[addr] = true;\n    return true;\n  }\n\n  function _removePauser(address addr) internal returns (bool) {\n    pausers[addr] = false;\n    return true;\n  }\n\n  function _pause() internal {\n    paused = true;\n  }\n\n  function _unpause() internal {\n    paused = false;\n  }\n}\n"
    },
    "contracts/abstracts/Resource.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./RERC20.sol\";\nimport \"./Mintable.sol\";\nimport \"./Burnable.sol\";\n\nabstract contract Resource is RERC20, RarityBurnable, RarityMintable {\n  function mint(uint256 summoner, uint256 amount) external {\n    require(!_isPaused(), \"Contract is paused\");\n    require(minters[msg.sender] == true, \"Mint Access Denied\");\n    _mint(summoner, amount);\n  }\n\n  function addMinter(address minter) external {\n    require(msg.sender == owner, \"Must be owner\");\n    _addMinter(minter);\n  }\n\n  function removeMinter(address minter) external {\n    require(msg.sender == owner, \"Must be owner\");\n    _removeMinter(minter);\n  }\n\n  function burn(uint256 summoner, uint256 amount) external {\n    require(!_isPaused(), \"Contract is paused\");\n    require(_isRarityOwner(summoner), \"Must be owner\");\n    _burn(summoner, amount);\n  }\n\n  function burnFrom(uint256 summoner, uint256 amount) external {\n    require(!_isPaused(), \"Contract is paused\");\n    uint256 allowance = burnAllowance[msg.sender][summoner];\n    require(amount <= allowance, \"Requested Burn greater than approval\");\n    _burn(summoner, amount);\n    burnAllowance[msg.sender][summoner] = allowance - amount;\n  }\n\n  function burnApprove(\n    uint256 summoner,\n    address burner,\n    uint256 amount\n  ) external {\n    require(!_isPaused(), \"Contract is paused\");\n    require(_isRarityOwner(summoner), \"Must be owner\");\n    _burnApprove(summoner, burner, amount);\n  }\n}\n"
    },
    "contracts/abstracts/Mintable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./RERC20.sol\";\n\nabstract contract RarityMintable is RERC20 {\n  mapping(address => bool) public minters;\n\n  event Mint(uint256 indexed from, uint256 indexed to, uint256 amount);\n\n  function _mint(uint256 dst, uint256 amount) internal {\n    _totalSupply += amount;\n    _balanceOf[dst] += amount;\n    emit Mint(dst, dst, amount);\n  }\n\n  function _addMinter(address minter) internal {\n    minters[minter] = true;\n  }\n\n  function _removeMinter(address minter) internal {\n    minters[minter] = false;\n  }\n}\n"
    },
    "contracts/mill/Oil.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Resource.sol\";\n\ncontract Oil is Resource {\n  constructor() RERC20() {\n    _name = \"RarityFarms-Oil\";\n    _symbol = \"OIL\";\n  }\n}\n"
    },
    "contracts/mill/Meal.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Resource.sol\";\n\ncontract Meal is Resource {\n  constructor() RERC20() {\n    _name = \"RarityFarms-Meal\";\n    _symbol = \"MEAL\";\n  }\n}\n"
    },
    "contracts/mill/Flour.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Resource.sol\";\n\ncontract Flour is Resource {\n  constructor() RERC20() {\n    _name = \"RarityFarms-Flour\";\n    _symbol = \"FLOUR\";\n  }\n}\n"
    },
    "contracts/abstracts/Crop.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./RERC20.sol\";\nimport \"./Mintable.sol\";\nimport \"./Burnable.sol\";\n\nabstract contract Crop is RERC20, RarityBurnable, RarityMintable {\n  function mint(uint256 summoner, uint256 amount) external {\n    require(!_isPaused(), \"Contract is paused\");\n    require(minters[msg.sender] == true, \"Mint Access Denied\");\n    _mint(summoner, amount);\n  }\n\n  function addMinter(address minter) external {\n    require(msg.sender == owner, \"Must be owner\");\n    _addMinter(minter);\n  }\n\n  function removeMinter(address minter) external {\n    require(msg.sender == owner, \"Must be owner\");\n    _removeMinter(minter);\n  }\n\n  function burn(uint256 summoner, uint256 amount) external {\n    require(!_isPaused(), \"Contract is paused\");\n    require(_isRarityOwner(summoner), \"Must be owner\");\n    _burn(summoner, amount);\n  }\n\n  function burnFrom(uint256 summoner, uint256 amount) external {\n    require(!_isPaused(), \"Contract is paused\");\n    uint256 allowance = burnAllowance[msg.sender][summoner];\n    require(amount <= allowance, \"Requested Burn greater than approval\");\n    _burn(summoner, amount);\n    burnAllowance[msg.sender][summoner] = allowance - amount;\n  }\n\n  function burnApprove(\n    uint256 summoner,\n    address burner,\n    uint256 amount\n  ) external {\n    require(!_isPaused(), \"Contract is paused\");\n    require(_isRarityOwner(summoner), \"Must be owner\");\n    _burnApprove(summoner, burner, amount);\n  }\n}\n"
    },
    "contracts/mill/Malt.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Crop.sol\";\n\ncontract Malt is Crop {\n  constructor() RERC20() {\n    _name = \"RarityFarms-Malt\";\n    _symbol = \"MALT\";\n  }\n}\n"
    },
    "contracts/crops/Wheat.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Crop.sol\";\n\ncontract Wheat is Crop {\n  constructor() RERC20() {\n    _name = \"RarityFarms-Wheat\";\n    _symbol = \"WHEAT\";\n  }\n}\n"
    },
    "contracts/crops/Corn.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Crop.sol\";\n\ncontract Corn is Crop {\n  constructor() RERC20() {\n    _name = \"RarityFarms-Corn\";\n    _symbol = \"CORN\";\n  }\n}\n"
    },
    "contracts/crops/Beans.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Crop.sol\";\n\ncontract Beans is Crop {\n  constructor() RERC20() {\n    _name = \"RarityFarms-Beans\";\n    _symbol = \"BEANS\";\n  }\n}\n"
    },
    "contracts/crops/Barley.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Crop.sol\";\n\ncontract Barley is Crop {\n  constructor() RERC20() {\n    _name = \"RarityFarms-Barley\";\n    _symbol = \"BARLEY\";\n  }\n}\n"
    },
    "contracts/mill/Mill.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Ownable.sol\";\nimport \"../abstracts/Pausable.sol\";\n\ninterface ICrop {\n  function burn(uint256, uint256) external;\n\n  function balanceOf(uint256) external view returns (uint256);\n}\n\ninterface IRefinedResource {\n  function mint(uint256 summoner, uint256 amount) external;\n}\n\ncontract Mill is Ownable, Pausable {\n  uint8 refiningCost = 10;\n\n  ICrop public corn;\n  ICrop public wheat;\n  ICrop public beans;\n  ICrop public barley;\n\n  IRefinedResource public meal;\n  IRefinedResource public flour;\n  IRefinedResource public oil;\n  IRefinedResource public malt;\n\n  constructor(\n    address _corn,\n    address _wheat,\n    address _beans,\n    address _barley,\n    address _meal,\n    address _flour,\n    address _oil,\n    address _malt\n  ) {\n    corn = ICrop(_corn);\n    wheat = ICrop(_wheat);\n    beans = ICrop(_beans);\n    barley = ICrop(_barley);\n    meal = IRefinedResource(_meal);\n    flour = IRefinedResource(_flour);\n    oil = IRefinedResource(_oil);\n    malt = IRefinedResource(_malt);\n  }\n\n  function refineCorn(uint256 summoner) external {\n    _refine(summoner, meal, corn);\n  }\n\n  function refineWheat(uint256 summoner) external {\n    _refine(summoner, flour, wheat);\n  }\n\n  function refineBeans(uint256 summoner) external {\n    _refine(summoner, oil, beans);\n  }\n\n  function refineBarley(uint256 summoner) external {\n    _refine(summoner, malt, barley);\n  }\n\n  function setRefiningCost(uint8 value) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    refiningCost = value;\n  }\n\n  function _refine(\n    uint256 summoner,\n    IRefinedResource resource,\n    ICrop crop\n  ) internal {\n    require(_isPaused() == false, \"Farm not available\");\n    uint256 balance = crop.balanceOf(summoner);\n    require(balance >= refiningCost * 1e18, \"Crop balance too low\");\n    crop.burn(summoner, refiningCost * 1e18);\n    resource.mint(summoner, 1 * 1e18);\n  }\n}\n"
    },
    "contracts/abstracts/Farm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./Rarity.sol\";\nimport \"./Ownable.sol\";\nimport \"./Pausable.sol\";\n\ninterface ICrop {\n  function mint(uint256 summoner, uint256 amount) external;\n}\n\nabstract contract Farm is Rarity, Ownable, Pausable {\n  uint256 public yield;\n  uint32 public yieldBase;\n  address public disaster;\n\n  event FarmResource(\n    uint256 indexed _summoner,\n    address _crop,\n    uint256 _amount,\n    uint256 _yield,\n    uint256 _roll,\n    uint256 _level\n  );\n\n  constructor() Rarity() Ownable() {\n    yield = 0;\n    yieldBase = 5000;\n    disaster = address(0);\n  }\n\n  function setOwner(address _owner) external returns (bool) {\n    require(owner == msg.sender, \"Must be owner\");\n    _setOwner(_owner);\n    return true;\n  }\n\n  function _farm(uint256 _summoner, ICrop _crop) internal {\n    require(_isPaused() == false, \"Farm not available\");\n    _getRarity().adventure(_summoner);\n    uint256[4] memory _stats = _getSummoner(_summoner);\n    uint32 _multiplier = _yieldMultiplier();\n    uint64 _amount = _multiplier * 1e18;\n    _crop.mint(_summoner, _amount);\n    uint256 _roll = _getRarityRandom().d20(_summoner);\n    uint256 _yield = _roll * _stats[3];\n    yield = yield + _yield;\n    emit FarmResource(\n      _summoner,\n      address(_crop),\n      _amount,\n      _yield,\n      _roll,\n      _stats[3]\n    );\n  }\n\n  function yieldMultiplier() external view returns (uint32) {\n    return _yieldMultiplier();\n  }\n\n  function _yieldMultiplier() internal view returns (uint32) {\n    if (yield < yieldBase) {\n      return 1;\n    } else if (yield < yieldBase * 2) {\n      return 2;\n    } else if (yield < yieldBase * 3) {\n      return 3;\n    } else if (yield < yieldBase * 4) {\n      return 4;\n    } else {\n      return 5;\n    }\n  }\n\n  function setYieldBase(uint32 base) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    yieldBase = base;\n  }\n\n  function setYield(uint256 _yield) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    yield = _yield;\n  }\n\n  function setDisaster(address _addr, uint256 _yield) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    _addPauser(_addr);\n    disaster = _addr;\n    yield = _yield;\n    _pause();\n  }\n\n  function clearDisaster() external {\n    require(\n      _isOwner(msg.sender) || _isDisaster(msg.sender),\n      \"Must be owner or disaster\"\n    );\n    _removePauser(disaster);\n    disaster = address(0);\n    _unpause();\n  }\n\n  function _isDisaster(address _addr) internal view returns (bool) {\n    return disaster == _addr;\n  }\n}\n"
    },
    "contracts/farms/Beginner.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Farm.sol\";\n\ncontract BeginnerFarm is Farm {\n  string public constant name = \"RarityFarms\";\n  string public constant symbol = \"BFARM\";\n\n  ICrop public corn;\n  ICrop public wheat;\n  ICrop public beans;\n  ICrop public barley;\n\n  // Events\n\n  constructor(\n    address _corn,\n    address _wheat,\n    address _beans,\n    address _barley\n  ) Farm() {\n    corn = ICrop(_corn);\n    wheat = ICrop(_wheat);\n    beans = ICrop(_beans);\n    barley = ICrop(_barley);\n\n    yieldBase = 5000;\n  }\n\n  function farm(uint256 summoner, uint8 resource) external {\n    require(resource > 0 && resource < 5, \"Invalid Resource\");\n    if (resource == 1) {\n      _farm(summoner, corn);\n    } else if (resource == 2) {\n      _farm(summoner, wheat);\n    } else if (resource == 3) {\n      _farm(summoner, beans);\n    } else if (resource == 4) {\n      _farm(summoner, barley);\n    }\n  }\n\n  function farmCorn(uint256 summoner) external {\n    _farm(summoner, corn);\n  }\n\n  function farmWheat(uint256 summoner) external {\n    _farm(summoner, wheat);\n  }\n\n  function farmBeans(uint256 summoner) external {\n    _farm(summoner, beans);\n  }\n\n  function farmBarley(uint256 summoner) external {\n    _farm(summoner, barley);\n  }\n\n  function addPauser(address addr) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    _addPauser(addr);\n  }\n\n  function removePauser(address addr) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    _removePauser(addr);\n  }\n}\n"
    },
    "contracts/abstracts/Disaster.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./Rarity.sol\";\nimport \"./Ownable.sol\";\nimport \"./Pausable.sol\";\nimport \"./Farm.sol\";\n\ninterface IFarm {\n  function clearDisaster() external;\n}\n\nabstract contract Disaster is Rarity, Ownable, Pausable {\n  uint32 public id;\n  uint256 public hp;\n  uint256 public damage;\n  uint256 public farmDamage;\n  uint32 public attackAttr;\n  IFarm public farm;\n\n  uint32[6] public scoreRequirements;\n  uint32[11] public classMultipliers;\n\n  // Events\n  event Attack(\n    uint256 indexed _summoner,\n    uint256 attack,\n    uint256 roll,\n    uint256 multiplier,\n    uint256 power\n  );\n\n  event Cleared(uint256 indexed _summoner, bool _paused);\n\n  constructor(\n    address _farm,\n    uint256 _farmDamage,\n    uint256 _hp,\n    uint32[6] memory _requirements\n  ) Rarity() Ownable() {\n    hp = _hp;\n    farmDamage = _farmDamage;\n    scoreRequirements = _requirements;\n    damage = 0;\n    farm = IFarm(_farm);\n  }\n\n  function attack(uint256 _summoner) external returns (uint256[4] memory) {\n    require(_isPaused() == false, \"Disaster has ended\");\n    require(_isRarityOwner(_summoner), \"Must be owner\");\n    uint32[6] memory _scores = _getSummonerAttributes(_summoner);\n    uint256[4] memory _stats = _getSummoner(_summoner);\n    require(_scout(_scores), \"Your summoner is not powerful enough\");\n\n    _getRarity().adventure(_summoner);\n    uint256 roll = _getRarityRandom().d20(_summoner);\n    uint32 power = _getAttackScore(_summoner);\n    uint32 multiplier = _getClassMultiplier(_stats[2]);\n    uint256 attackDamage = roll * power * multiplier;\n    damage += attackDamage;\n    if (damage > hp) {\n      _endDisaster();\n      emit Cleared(_summoner, paused);\n    }\n    emit Attack(_summoner, attackDamage, roll, multiplier, power);\n    return [attackDamage, roll, multiplier, power];\n  }\n\n  function scout(uint256 _summoner) external view returns (bool) {\n    uint32[6] memory _scores = _getSummonerAttributes(_summoner);\n    return _scout(_scores);\n  }\n\n  function _scout(uint32[6] memory _scores) internal view returns (bool) {\n    uint256 arrayLength = scoreRequirements.length;\n    for (uint256 i = 0; i < arrayLength; i++) {\n      if (_scores[i] < scoreRequirements[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function _getAttackScore(uint256 _summoner) internal view returns (uint32) {\n    uint32[6] memory _scores = _getSummonerAttributes(_summoner);\n    return _scores[attackAttr - 1];\n  }\n\n  function _endDisaster() internal {\n    farm.clearDisaster();\n    _pause();\n  }\n\n  function _getClassMultiplier(uint256 _class) internal view returns (uint32) {\n    return classMultipliers[_class - 1];\n  }\n\n  function getClassMultipliers() external view returns (uint32[11] memory) {\n    return classMultipliers;\n  }\n\n  function getScoreRequirements() external view returns (uint32[6] memory) {\n    return scoreRequirements;\n  }\n}\n"
    },
    "contracts/disasters/Locust.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Disaster.sol\";\n\ncontract Locust is Disaster {\n  constructor(\n    address farm,\n    uint256 farmDamage,\n    uint256 hp,\n    uint32[6] memory _requirements\n  ) Disaster(farm, farmDamage, hp, _requirements) {\n    id = 1;\n    classMultipliers = [2, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1];\n    attackAttr = 1; // Strength\n  }\n}\n"
    },
    "contracts/disasters/Flood.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Disaster.sol\";\n\ncontract Flood is Disaster {\n  constructor(\n    address farm,\n    uint256 farmDamage,\n    uint256 hp,\n    uint32[6] memory _requirements\n  ) Disaster(farm, farmDamage, hp, _requirements) {\n    id = 2;\n    classMultipliers = [1, 1, 2, 2, 1, 3, 1, 1, 1, 1, 1];\n    attackAttr = 5; // Wisdom\n  }\n}\n"
    },
    "contracts/disasters/Fire.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Disaster.sol\";\n\ncontract Fire is Disaster {\n  constructor(\n    address farm,\n    uint256 farmDamage,\n    uint256 hp,\n    uint32[6] memory _requirements\n  ) Disaster(farm, farmDamage, hp, _requirements) {\n    id = 2;\n    classMultipliers = [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2];\n    attackAttr = 4; // Intelligence\n  }\n}\n"
    },
    "contracts/disasters/Drought.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Disaster.sol\";\n\ncontract Drought is Disaster {\n  constructor(\n    address farm,\n    uint256 farmDamage,\n    uint256 hp,\n    uint32[6] memory _requirements\n  ) Disaster(farm, farmDamage, hp, _requirements) {\n    id = 2;\n    classMultipliers = [1, 2, 1, 1, 1, 1, 1, 2, 3, 1, 1];\n    attackAttr = 2; // Dexterity\n  }\n}\n"
    },
    "contracts/Token.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract RarityAdventuresToken is ERC20 {\n  constructor(uint256 initialSupply) ERC20(\"RarityAdventures\", \"RADV\") {\n    _mint(msg.sender, initialSupply * 1e18);\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}