{
  "language": "Solidity",
  "sources": {
    "contracts/proxies/FarmProxy.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Rarity.sol\";\n\ninterface IFarm {\n  function farm(uint256 summoner, uint8 resource) external;\n}\n\ninterface IRarityApprove {\n  function setApprovalForAll(address operator, bool _approved) external;\n}\n\ncontract FarmProxy is Rarity {\n  IRarityApprove constant rmApprove =\n    IRarityApprove(0xce761D788DF608BD21bdd59d6f4B54b2e27F25Bb);\n\n  IFarm private grain;\n  IFarm private fruit;\n  IFarm private veggie;\n\n  struct Routine {\n    uint256 summoner;\n    uint8 farm;\n    uint8 resource;\n  }\n\n  constructor(\n    address _grain,\n    address _fruit,\n    address _veggie\n  ) {\n    grain = IFarm(_grain);\n    fruit = IFarm(_fruit);\n    veggie = IFarm(_veggie);\n  }\n\n  function executeRoutines(Routine[] memory routines) external {\n    uint256 arrayLength = routines.length;\n    for (uint256 i = 0; i < arrayLength; i++) {\n      if (routines[i].farm == 0) {\n        grain.farm(routines[i].summoner, routines[i].resource);\n      } else if (routines[i].farm == 1) {\n        fruit.farm(routines[i].summoner, routines[i].resource);\n      } else if (routines[i].farm == 2) {\n        veggie.farm(routines[i].summoner, routines[i].resource);\n      }\n    }\n  }\n}\n"
    },
    "contracts/abstracts/Rarity.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IRarity {\n  function level(uint256) external view returns (uint256);\n\n  function getApproved(uint256) external view returns (address);\n\n  function isApprovedForAll(address owner, address operator)\n    external\n    view\n    returns (bool);\n\n  function ownerOf(uint256) external view returns (address);\n\n  function summoner(uint256)\n    external\n    view\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    );\n\n  function adventure(uint256) external;\n}\n\ninterface IRarityAttributes {\n  function ability_scores(uint256)\n    external\n    view\n    returns (\n      uint32,\n      uint32,\n      uint32,\n      uint32,\n      uint32,\n      uint32\n    );\n}\n\ninterface IRarityRandomCodex {\n  function d20(uint256) external view returns (uint256);\n}\n\nabstract contract Rarity {\n  IRarity constant _rm = IRarity(0xce761D788DF608BD21bdd59d6f4B54b2e27F25Bb);\n  IRarityAttributes constant _attr =\n    IRarityAttributes(0xB5F5AF1087A8DA62A23b08C00C6ec9af21F397a1);\n  IRarityRandomCodex constant _random =\n    IRarityRandomCodex(0x7426dBE5207C2b5DaC57d8e55F0959fcD99661D4);\n\n  constructor() {}\n\n  function _isRarityOwner(uint256 _summoner) internal view returns (bool) {\n    return _rm.ownerOf(_summoner) == msg.sender;\n  }\n\n  function _isRarityApproved(uint256 _summoner) internal view returns (bool) {\n    return\n      _rm.getApproved(_summoner) == msg.sender ||\n      _rm.isApprovedForAll(_rm.ownerOf(_summoner), msg.sender);\n  }\n\n  function _isRarityApprovedOrOwner(uint256 _summoner)\n    internal\n    view\n    returns (bool)\n  {\n    return _isRarityApproved(_summoner) || _isRarityOwner(_summoner);\n  }\n\n  function _getRarity() internal pure returns (IRarity) {\n    return _rm;\n  }\n\n  function _getRarityAttributes() internal pure returns (IRarityAttributes) {\n    return _attr;\n  }\n\n  function _getRarityRandom() internal pure returns (IRarityRandomCodex) {\n    return _random;\n  }\n\n  function _getSummonerAttributes(uint256 _summoner)\n    internal\n    view\n    returns (uint32[6] memory)\n  {\n    (\n      uint32 _str,\n      uint32 _dex,\n      uint32 _con,\n      uint32 _int,\n      uint32 _wis,\n      uint32 _cha\n    ) = _attr.ability_scores(_summoner);\n    uint32[6] memory scores = [_str, _dex, _con, _int, _wis, _cha];\n    return scores;\n  }\n\n  function _getSummoner(uint256 _summoner)\n    internal\n    view\n    returns (uint256[4] memory)\n  {\n    (uint256 _xp, uint256 _log, uint256 _class, uint256 _level) = _rm.summoner(\n      _summoner\n    );\n    uint256[4] memory result = [_xp, _log, _class, _level];\n    return result;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}