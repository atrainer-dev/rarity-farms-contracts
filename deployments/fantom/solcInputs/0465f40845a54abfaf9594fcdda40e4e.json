{
  "language": "Solidity",
  "sources": {
    "contracts/abstracts/NewFarm.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IRarity {\n  function adventure(uint256) external;\n}\n\ninterface IResource {\n  function mint(uint256 summoner, uint256 amount) external;\n}\n\nabstract contract NewFarm {\n  bool public paused;\n  address public owner;\n  address public disaster;\n  string public name;\n  IRarity private constant RARITY =\n    IRarity(0xce761D788DF608BD21bdd59d6f4B54b2e27F25Bb);\n\n  struct Resource {\n    IResource resource;\n    uint8 multiplier;\n  }\n\n  mapping(address => bool) public pausers;\n  mapping(uint8 => Resource) public resources;\n\n  // Events\n  event FarmResource(\n    uint256 indexed _summoner,\n    address _resource,\n    uint256 _amount\n  );\n\n  constructor(\n    address _one,\n    address _two,\n    address _three,\n    address _four\n  ) {\n    disaster = address(0);\n    owner = msg.sender;\n    paused = false;\n    resources[0].resource = IResource(_one);\n    resources[0].multiplier = 3;\n    resources[1].resource = IResource(_two);\n    resources[1].multiplier = 3;\n    resources[2].resource = IResource(_three);\n    resources[2].multiplier = 3;\n    resources[3].resource = IResource(_four);\n    resources[3].multiplier = 3;\n  }\n\n  function farm(uint256 summoner, uint8 id) external {\n    require(id < 4, \"Invalid Id\");\n    _farm(summoner, resources[id]);\n  }\n\n  function pause() external {\n    require(_isOwner(msg.sender) || pausers[msg.sender], \"Must be owner\");\n    paused = true;\n  }\n\n  function unpause() external {\n    require(_isOwner(msg.sender) || pausers[msg.sender], \"Must be owner\");\n    paused = false;\n  }\n\n  function addPauser(address addr) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    pausers[addr] = true;\n  }\n\n  function removePauser(address addr) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    pausers[addr] = false;\n  }\n\n  /*\n  function getMultipliers() external view returns (uint8[4] memory) {\n    return attributes.multipliers;\n  }\n  */\n\n  function setMultipliers(\n    uint8 _one,\n    uint8 _two,\n    uint8 _three,\n    uint8 _four\n  ) external {\n    resources[0].multiplier = _one;\n    resources[1].multiplier = _two;\n    resources[2].multiplier = _three;\n    resources[3].multiplier = _four;\n  }\n\n  function setOwner(address _owner) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    owner = _owner;\n  }\n\n  function setDisaster(address _addr) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    pausers[_addr] = true;\n    disaster = _addr;\n    paused = true;\n  }\n\n  function clearDisaster() external {\n    require(\n      _isOwner(msg.sender) || disaster == msg.sender,\n      \"Must be owner or disaster\"\n    );\n    pausers[msg.sender] = false;\n    disaster = address(0);\n    paused = false;\n  }\n\n  function _isOwner(address addr) internal view returns (bool) {\n    return owner == addr;\n  }\n\n  function _farm(uint256 _summoner, Resource memory _resource) internal {\n    require(!paused, \"Farm not available\");\n    RARITY.adventure(_summoner);\n    uint256 amount = _resource.multiplier * 1e18;\n    _resource.resource.mint(_summoner, amount);\n    emit FarmResource(_summoner, address(_resource.resource), amount);\n  }\n}\n"
    },
    "contracts/farms/veggie/VeggieFarm.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../../abstracts/NewFarm.sol\";\n\ncontract VeggieFarm is NewFarm {\n  constructor(\n    address _carrot,\n    address _onion,\n    address _potato,\n    address _tomato\n  ) NewFarm(_carrot, _onion, _potato, _tomato) {\n    name = \"Veggie\";\n  }\n}\n"
    },
    "contracts/farms/grain/GrainFarm.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../../abstracts/NewFarm.sol\";\n\ncontract GrainFarm is NewFarm {\n  constructor(\n    address _barley,\n    address _bean,\n    address _corn,\n    address _wheat\n  ) NewFarm(_barley, _bean, _corn, _wheat) {\n    name = \"Grain\";\n  }\n}\n"
    },
    "contracts/farms/fruit/FruitFarm.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../../abstracts/NewFarm.sol\";\n\ncontract FruitFarm is NewFarm {\n  constructor(\n    address _apple,\n    address _banana,\n    address _peach,\n    address _strawberry\n  ) NewFarm(_apple, _banana, _peach, _strawberry) {\n    name = \"Fruit\";\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}