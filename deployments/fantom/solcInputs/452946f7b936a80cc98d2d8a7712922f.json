{
  "language": "Solidity",
  "sources": {
    "contracts/abstracts/Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./RERC20.sol\";\n\nabstract contract RarityBurnable is RERC20 {\n  mapping(address => mapping(uint256 => uint256)) public burnAllowance;\n\n  event Burn(uint256 indexed from, uint256 indexed to, uint256 amount);\n  event BurnApproval(uint256 indexed from, address indexed to, uint256 amount);\n\n  function _burnApprove(\n    uint256 from,\n    address burner,\n    uint256 amount\n  ) internal returns (bool) {\n    burnAllowance[burner][from] = amount;\n    emit BurnApproval(from, burner, amount);\n    return true;\n  }\n\n  function _burn(uint256 dst, uint256 amount) internal {\n    uint256 balance = _balanceOf[dst];\n    require(balance >= amount, \"Balance too low\");\n    _totalSupply -= amount;\n    _balanceOf[dst] = balance - amount;\n    emit Burn(dst, dst, amount);\n  }\n}\n"
    },
    "contracts/abstracts/RERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./Rarity.sol\";\nimport \"./Ownable.sol\";\nimport \"./Pausable.sol\";\n\ninterface IRarityFungible {\n  event Transfer(uint256 indexed from, uint256 indexed to, uint256 amount);\n  event Approval(uint256 indexed from, uint256 indexed to, uint256 amount);\n\n  function name() external view returns (string memory);\n\n  function symbol() external view returns (string memory);\n\n  function decimals() external view returns (uint8);\n\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(uint256 owner) external view returns (uint256);\n\n  function allowance(uint256 owner, uint256 spender)\n    external\n    view\n    returns (uint256);\n\n  function approve(\n    uint256 from,\n    uint256 spender,\n    uint256 amount\n  ) external returns (bool);\n\n  function transfer(\n    uint256 from,\n    uint256 to,\n    uint256 amount\n  ) external returns (bool);\n\n  function transferFrom(\n    uint256 executor,\n    uint256 from,\n    uint256 to,\n    uint256 amount\n  ) external returns (bool);\n}\n\nabstract contract RERC20 is IRarityFungible, Rarity, Ownable, Pausable {\n  string _name;\n  string _symbol;\n  uint256 public _totalSupply = 0;\n  uint8 public constant _decimals = 18;\n\n  mapping(uint256 => uint256) public _balanceOf;\n  mapping(uint256 => mapping(uint256 => uint256)) public _transferAllowance;\n\n  constructor() Rarity() Ownable() Pausable() {}\n\n  function name() external view override returns (string memory) {\n    return _name;\n  }\n\n  function symbol() external view override returns (string memory) {\n    return _symbol;\n  }\n\n  function decimals() external view override returns (uint8) {\n    return _decimals;\n  }\n\n  function totalSupply() external view override returns (uint256) {\n    return _totalSupply;\n  }\n\n  function balanceOf(uint256 owner) external view override returns (uint256) {\n    return _balanceOf[owner];\n  }\n\n  function allowance(uint256 owner, uint256 spender)\n    external\n    view\n    override\n    returns (uint256)\n  {\n    return _transferAllowance[owner][spender];\n  }\n\n  function approve(\n    uint256 from,\n    uint256 spender,\n    uint256 amount\n  ) external override returns (bool) {\n    require(_isRarityApprovedOrOwner(from), \"Must be owner\");\n    _transferAllowance[from][spender] = amount;\n\n    emit Approval(from, spender, amount);\n    return true;\n  }\n\n  function transfer(\n    uint256 from,\n    uint256 to,\n    uint256 amount\n  ) external override returns (bool) {\n    require(!_isPaused(), \"Contract is paused\");\n    require(_isRarityApprovedOrOwner(from), \"Must be owner\");\n    _transferTokens(from, to, amount);\n    return true;\n  }\n\n  function transferFrom(\n    uint256 executor,\n    uint256 from,\n    uint256 to,\n    uint256 amount\n  ) external override returns (bool) {\n    require(!_isPaused(), \"Contract is paused\");\n    require(_isRarityApprovedOrOwner(executor), \"Must be owner\");\n    uint256 spender = executor;\n    uint256 allow = _transferAllowance[from][spender];\n    require(amount <= allow, \"Transfer amount greater than approval\");\n    _transferTokens(from, to, amount);\n    _transferAllowance[from][spender] = allow - amount;\n    return true;\n  }\n\n  function _transferTokens(\n    uint256 from,\n    uint256 to,\n    uint256 amount\n  ) internal {\n    _balanceOf[from] -= amount;\n    _balanceOf[to] += amount;\n\n    emit Transfer(from, to, amount);\n  }\n\n  function setOwner(address _owner) external returns (bool) {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    _setOwner(_owner);\n    return true;\n  }\n}\n"
    },
    "contracts/abstracts/Rarity.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IRarity {\n  function level(uint256) external view returns (uint256);\n\n  function getApproved(uint256) external view returns (address);\n\n  function isApprovedForAll(address owner, address operator)\n    external\n    view\n    returns (bool);\n\n  function ownerOf(uint256) external view returns (address);\n\n  function summoner(uint256)\n    external\n    view\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    );\n\n  function adventure(uint256) external;\n}\n\ninterface IRarityAttributes {\n  function ability_scores(uint256)\n    external\n    view\n    returns (\n      uint32,\n      uint32,\n      uint32,\n      uint32,\n      uint32,\n      uint32\n    );\n}\n\ninterface IRarityRandomCodex {\n  function d20(uint256) external view returns (uint256);\n}\n\nabstract contract Rarity {\n  IRarity constant _rm = IRarity(0xce761D788DF608BD21bdd59d6f4B54b2e27F25Bb);\n  IRarityAttributes constant _attr =\n    IRarityAttributes(0xB5F5AF1087A8DA62A23b08C00C6ec9af21F397a1);\n  IRarityRandomCodex constant _random =\n    IRarityRandomCodex(0x7426dBE5207C2b5DaC57d8e55F0959fcD99661D4);\n\n  constructor() {}\n\n  function _isRarityOwner(uint256 _summoner) internal view returns (bool) {\n    return _rm.ownerOf(_summoner) == msg.sender;\n  }\n\n  function _isRarityApproved(uint256 _summoner) internal view returns (bool) {\n    return\n      _rm.getApproved(_summoner) == msg.sender ||\n      _rm.isApprovedForAll(_rm.ownerOf(_summoner), msg.sender);\n  }\n\n  function _isRarityApprovedOrOwner(uint256 _summoner)\n    internal\n    view\n    returns (bool)\n  {\n    return _isRarityApproved(_summoner) || _isRarityOwner(_summoner);\n  }\n\n  function _getRarity() internal pure returns (IRarity) {\n    return _rm;\n  }\n\n  function _getRarityAttributes() internal pure returns (IRarityAttributes) {\n    return _attr;\n  }\n\n  function _getRarityRandom() internal pure returns (IRarityRandomCodex) {\n    return _random;\n  }\n\n  function _getSummonerAttributes(uint256 _summoner)\n    internal\n    view\n    returns (uint32[6] memory)\n  {\n    (\n      uint32 _str,\n      uint32 _dex,\n      uint32 _con,\n      uint32 _int,\n      uint32 _wis,\n      uint32 _cha\n    ) = _attr.ability_scores(_summoner);\n    uint32[6] memory scores = [_str, _dex, _con, _int, _wis, _cha];\n    return scores;\n  }\n\n  function _getSummoner(uint256 _summoner)\n    internal\n    view\n    returns (uint256[4] memory)\n  {\n    (uint256 _xp, uint256 _log, uint256 _class, uint256 _level) = _rm.summoner(\n      _summoner\n    );\n    uint256[4] memory result = [_xp, _log, _class, _level];\n    return result;\n  }\n}\n"
    },
    "contracts/abstracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nabstract contract Ownable {\n  address public owner;\n\n  constructor() {\n    owner = msg.sender;\n  }\n\n  function _isOwner(address addr) internal view returns (bool) {\n    return owner == addr;\n  }\n\n  function _setOwner(address addr) internal returns (bool) {\n    owner = addr;\n    return true;\n  }\n}\n"
    },
    "contracts/abstracts/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nabstract contract Pausable {\n  bool public paused;\n  mapping(address => bool) public pausers;\n\n  constructor() {\n    paused = false;\n    pausers[msg.sender] = true;\n  }\n\n  function _isPaused() internal view returns (bool) {\n    return paused == true;\n  }\n\n  function pause() external returns (bool) {\n    require(pausers[msg.sender], \"Pause denied\");\n    _pause();\n    return true;\n  }\n\n  function unpause() external returns (bool) {\n    require(pausers[msg.sender], \"Unpause denied\");\n    _unpause();\n    return true;\n  }\n\n  function _addPauser(address addr) internal returns (bool) {\n    pausers[addr] = true;\n    return true;\n  }\n\n  function _removePauser(address addr) internal returns (bool) {\n    pausers[addr] = false;\n    return true;\n  }\n\n  function _pause() internal {\n    paused = true;\n  }\n\n  function _unpause() internal {\n    paused = false;\n  }\n}\n"
    },
    "contracts/abstracts/Crop.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./RERC20.sol\";\nimport \"./Mintable.sol\";\nimport \"./Burnable.sol\";\n\nabstract contract Crop is RERC20, RarityBurnable, RarityMintable {\n  function mint(uint256 summoner, uint256 amount) external {\n    require(!_isPaused(), \"Contract is paused\");\n    require(minters[msg.sender] == true, \"Mint Access Denied\");\n    _mint(summoner, amount);\n  }\n\n  function addMinter(address minter) external {\n    require(msg.sender == owner, \"Must be owner\");\n    _addMinter(minter);\n  }\n\n  function removeMinter(address minter) external {\n    require(msg.sender == owner, \"Must be owner\");\n    _removeMinter(minter);\n  }\n\n  function burn(uint256 summoner, uint256 amount) external {\n    require(!_isPaused(), \"Contract is paused\");\n    require(_isRarityOwner(summoner), \"Must be owner\");\n    _burn(summoner, amount);\n  }\n\n  function burnFrom(uint256 summoner, uint256 amount) external {\n    require(!_isPaused(), \"Contract is paused\");\n    uint256 allowance = burnAllowance[msg.sender][summoner];\n    require(amount <= allowance, \"Requested Burn greater than approval\");\n    _burn(summoner, amount);\n    burnAllowance[msg.sender][summoner] = allowance - amount;\n  }\n\n  function burnApprove(\n    uint256 summoner,\n    address burner,\n    uint256 amount\n  ) external {\n    require(!_isPaused(), \"Contract is paused\");\n    require(_isRarityOwner(summoner), \"Must be owner\");\n    _burnApprove(summoner, burner, amount);\n  }\n}\n"
    },
    "contracts/abstracts/Mintable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./RERC20.sol\";\n\nabstract contract RarityMintable is RERC20 {\n  mapping(address => bool) public minters;\n\n  event Mint(uint256 indexed from, uint256 indexed to, uint256 amount);\n\n  function _mint(uint256 dst, uint256 amount) internal {\n    _totalSupply += amount;\n    _balanceOf[dst] += amount;\n    emit Mint(dst, dst, amount);\n  }\n\n  function _addMinter(address minter) internal {\n    minters[minter] = true;\n  }\n\n  function _removeMinter(address minter) internal {\n    minters[minter] = false;\n  }\n}\n"
    },
    "contracts/crops/Wheat.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Crop.sol\";\n\ncontract Wheat is Crop {\n  constructor() RERC20() {\n    _name = \"RarityFarms-Wheat\";\n    _symbol = \"WHEAT\";\n  }\n}\n"
    },
    "contracts/crops/Corn.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Crop.sol\";\n\ncontract Corn is Crop {\n  constructor() RERC20() {\n    _name = \"RarityFarms-Corn\";\n    _symbol = \"CORN\";\n  }\n}\n"
    },
    "contracts/crops/Beans.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Crop.sol\";\n\ncontract Beans is Crop {\n  constructor() RERC20() {\n    _name = \"RarityFarms-Beans\";\n    _symbol = \"BEANS\";\n  }\n}\n"
    },
    "contracts/crops/Barley.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Crop.sol\";\n\ncontract Barley is Crop {\n  constructor() RERC20() {\n    _name = \"RarityFarms-Barley\";\n    _symbol = \"BARLEY\";\n  }\n}\n"
    },
    "contracts/abstracts/Farm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./Rarity.sol\";\nimport \"./Ownable.sol\";\nimport \"./Pausable.sol\";\n\ninterface ICrop {\n  function mint(uint256 summoner, uint256 amount) external;\n}\n\nabstract contract Farm is Rarity, Ownable, Pausable {\n  uint256 public yield;\n  uint32 public yieldBase;\n  address public disaster;\n\n  event FarmResource(\n    uint256 indexed _summoner,\n    address _crop,\n    uint256 _amount,\n    uint256 _yield,\n    uint256 _roll,\n    uint256 _level\n  );\n\n  constructor() Rarity() Ownable() {\n    yield = 0;\n    yieldBase = 5000;\n    disaster = address(0);\n  }\n\n  function setOwner(address _owner) external returns (bool) {\n    require(owner == msg.sender, \"Must be owner\");\n    _setOwner(_owner);\n    return true;\n  }\n\n  function _farm(uint256 _summoner, ICrop _crop) internal {\n    require(_isPaused() == false, \"Farm not available\");\n    _getRarity().adventure(_summoner);\n    uint256[4] memory _stats = _getSummoner(_summoner);\n    uint32 _multiplier = _yieldMultiplier();\n    uint64 _amount = _multiplier * 1e18;\n    _crop.mint(_summoner, _amount);\n    uint256 _roll = _getRarityRandom().d20(_summoner);\n    uint256 _yield = _roll * _stats[3];\n    yield = yield + _yield;\n    emit FarmResource(\n      _summoner,\n      address(_crop),\n      _amount,\n      _yield,\n      _roll,\n      _stats[3]\n    );\n  }\n\n  function yieldMultiplier() external view returns (uint32) {\n    return _yieldMultiplier();\n  }\n\n  function _yieldMultiplier() internal view returns (uint32) {\n    if (yield < yieldBase) {\n      return 1;\n    } else if (yield < yieldBase * 2) {\n      return 2;\n    } else if (yield < yieldBase * 3) {\n      return 3;\n    } else if (yield < yieldBase * 4) {\n      return 4;\n    } else {\n      return 5;\n    }\n  }\n\n  function setYieldBase(uint32 base) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    yieldBase = base;\n  }\n\n  function setYield(uint256 _yield) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    yield = _yield;\n  }\n\n  function setDisaster(address _addr, uint256 _yield) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    _addPauser(_addr);\n    disaster = _addr;\n    yield = _yield;\n    _pause();\n  }\n\n  function clearDisaster() external {\n    require(\n      _isOwner(msg.sender) || _isDisaster(msg.sender),\n      \"Must be owner or disaster\"\n    );\n    _removePauser(disaster);\n    disaster = address(0);\n    _unpause();\n  }\n\n  function _isDisaster(address _addr) internal view returns (bool) {\n    return disaster == _addr;\n  }\n}\n"
    },
    "contracts/farms/Beginner.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Farm.sol\";\n\ncontract BeginnerFarm is Farm {\n  string public constant name = \"RarityFarms\";\n  string public constant symbol = \"BFARM\";\n\n  ICrop public corn;\n  ICrop public wheat;\n  ICrop public beans;\n  ICrop public barley;\n\n  // Events\n\n  constructor(\n    address _corn,\n    address _wheat,\n    address _beans,\n    address _barley\n  ) Farm() {\n    corn = ICrop(_corn);\n    wheat = ICrop(_wheat);\n    beans = ICrop(_beans);\n    barley = ICrop(_barley);\n\n    yieldBase = 5000;\n  }\n\n  function farm(uint256 summoner, uint8 resource) external {\n    require(resource > 0 && resource < 5, \"Invalid Resource\");\n    if (resource == 1) {\n      _farm(summoner, corn);\n    } else if (resource == 2) {\n      _farm(summoner, wheat);\n    } else if (resource == 3) {\n      _farm(summoner, beans);\n    } else if (resource == 4) {\n      _farm(summoner, barley);\n    }\n  }\n\n  function farmCorn(uint256 summoner) external {\n    _farm(summoner, corn);\n  }\n\n  function farmWheat(uint256 summoner) external {\n    _farm(summoner, wheat);\n  }\n\n  function farmBeans(uint256 summoner) external {\n    _farm(summoner, beans);\n  }\n\n  function farmBarley(uint256 summoner) external {\n    _farm(summoner, barley);\n  }\n\n  function addPauser(address addr) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    _addPauser(addr);\n  }\n\n  function removePauser(address addr) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    _removePauser(addr);\n  }\n}\n"
    },
    "contracts/abstracts/Disaster.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./Rarity.sol\";\nimport \"./Ownable.sol\";\nimport \"./Pausable.sol\";\nimport \"./Farm.sol\";\n\ninterface IFarm {\n  function clearDisaster() external;\n}\n\nabstract contract Disaster is Rarity, Ownable, Pausable {\n  uint32 public id;\n  uint256 public hp;\n  uint256 public damage;\n  uint256 public farmDamage;\n  uint32 public attackAttr;\n  IFarm public farm;\n\n  uint32[6] public scoreRequirements;\n  uint32[11] public classMultipliers;\n\n  // Events\n  event Attack(\n    uint256 indexed _summoner,\n    uint256 attack,\n    uint256 roll,\n    uint256 multiplier,\n    uint256 power\n  );\n\n  event Cleared(uint256 indexed _summoner, bool _paused);\n\n  constructor(\n    address _farm,\n    uint256 _farmDamage,\n    uint256 _hp,\n    uint32[6] memory _requirements\n  ) Rarity() Ownable() {\n    hp = _hp;\n    farmDamage = _farmDamage;\n    scoreRequirements = _requirements;\n    damage = 0;\n    farm = IFarm(_farm);\n  }\n\n  function attack(uint256 _summoner) external returns (uint256[4] memory) {\n    require(_isPaused() == false, \"Disaster has ended\");\n    require(_isRarityOwner(_summoner), \"Must be owner\");\n    uint32[6] memory _scores = _getSummonerAttributes(_summoner);\n    uint256[4] memory _stats = _getSummoner(_summoner);\n    require(_scout(_scores), \"Your summoner is not powerful enough\");\n\n    _getRarity().adventure(_summoner);\n    uint256 roll = _getRarityRandom().d20(_summoner);\n    uint32 power = _getAttackScore(_summoner);\n    uint32 multiplier = _getClassMultiplier(_stats[2]);\n    uint256 attackDamage = roll * power * multiplier;\n    damage += attackDamage;\n    if (damage > hp) {\n      _endDisaster();\n      emit Cleared(_summoner, paused);\n    }\n    emit Attack(_summoner, attackDamage, roll, multiplier, power);\n    return [attackDamage, roll, multiplier, power];\n  }\n\n  function scout(uint256 _summoner) external view returns (bool) {\n    uint32[6] memory _scores = _getSummonerAttributes(_summoner);\n    return _scout(_scores);\n  }\n\n  function _scout(uint32[6] memory _scores) internal view returns (bool) {\n    uint256 arrayLength = scoreRequirements.length;\n    for (uint256 i = 0; i < arrayLength; i++) {\n      if (_scores[i] < scoreRequirements[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function _getAttackScore(uint256 _summoner) internal view returns (uint32) {\n    uint32[6] memory _scores = _getSummonerAttributes(_summoner);\n    return _scores[attackAttr - 1];\n  }\n\n  function _endDisaster() internal {\n    farm.clearDisaster();\n    _pause();\n  }\n\n  function _getClassMultiplier(uint256 _class) internal view returns (uint32) {\n    return classMultipliers[_class - 1];\n  }\n\n  function getClassMultipliers() external view returns (uint32[11] memory) {\n    return classMultipliers;\n  }\n\n  function getScoreRequirements() external view returns (uint32[6] memory) {\n    return scoreRequirements;\n  }\n}\n"
    },
    "contracts/disasters/Locust.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Disaster.sol\";\n\ncontract Locust is Disaster {\n  constructor(\n    address farm,\n    uint256 farmDamage,\n    uint256 hp,\n    uint32[6] memory _requirements\n  ) Disaster(farm, farmDamage, hp, _requirements) {\n    id = 1;\n    classMultipliers = [2, 1, 1, 1, 3, 1, 2, 1, 1, 1, 1];\n    attackAttr = 1; // Strength\n  }\n}\n"
    },
    "contracts/disasters/Flood.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Disaster.sol\";\n\ncontract Flood is Disaster {\n  constructor(\n    address farm,\n    uint256 farmDamage,\n    uint256 hp,\n    uint32[6] memory _requirements\n  ) Disaster(farm, farmDamage, hp, _requirements) {\n    id = 2;\n    classMultipliers = [1, 1, 2, 2, 1, 3, 1, 1, 1, 1, 1];\n    attackAttr = 5; // Wisdom\n  }\n}\n"
    },
    "contracts/disasters/Fire.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Disaster.sol\";\n\ncontract Fire is Disaster {\n  constructor(\n    address farm,\n    uint256 farmDamage,\n    uint256 hp,\n    uint32[6] memory _requirements\n  ) Disaster(farm, farmDamage, hp, _requirements) {\n    id = 2;\n    classMultipliers = [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2];\n    attackAttr = 4; // Intelligence\n  }\n}\n"
    },
    "contracts/disasters/Drought.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Disaster.sol\";\n\ncontract Drought is Disaster {\n  constructor(\n    address farm,\n    uint256 farmDamage,\n    uint256 hp,\n    uint32[6] memory _requirements\n  ) Disaster(farm, farmDamage, hp, _requirements) {\n    id = 2;\n    classMultipliers = [1, 2, 1, 1, 1, 1, 1, 2, 3, 1, 1];\n    attackAttr = 2; // Dexterity\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}