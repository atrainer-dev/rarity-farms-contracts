{
  "language": "Solidity",
  "sources": {
    "contracts/abstracts/BurnCompetition.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IRarity {\n  function ownerOf(uint256) external view returns (address);\n}\n\ninterface IRarityRandomCodex {\n  function d20(uint256) external view returns (uint256);\n}\n\ninterface IResource {\n  function burnFrom(uint256 summoner, uint256 amount) external;\n}\n\nabstract contract BurnCompetition {\n  bool public claimed = false;\n  address public owner;\n  IRarityRandomCodex private constant RANDOM =\n    IRarityRandomCodex(0x7426dBE5207C2b5DaC57d8e55F0959fcD99661D4);\n  IRarity private constant RARITY =\n    IRarity(0xce761D788DF608BD21bdd59d6f4B54b2e27F25Bb);\n\n  uint256 private constant DAY = 1 days;\n  uint256 public startDate;\n  uint256 public endDate;\n  uint256 public totalBurned;\n\n  mapping(uint256 => uint256) public scores;\n  uint256[] public summoners;\n\n  IResource public resource;\n\n  // Events\n  event Score(uint256 indexed _summoner, uint256 _roll, uint256 _amount);\n  event Claim(uint256 indexed _summoner, address claimer, uint256 amount);\n  event Withdrawl(address claimer, uint256 amount);\n\n  constructor(\n    IResource _resource,\n    uint256 _startDate,\n    uint256 _endDate\n  ) {\n    resource = _resource;\n    startDate = _startDate;\n    endDate = _endDate;\n    owner = msg.sender;\n  }\n\n  receive() external payable {}\n\n  function score(uint256 _summoner, uint256 amount) external {\n    require(block.timestamp > startDate, \"Competition not started\");\n    require(block.timestamp < endDate, \"Competition closed\");\n    require(_isRarityOwner(_summoner), \"Must own NFT\");\n    uint256 currentScore = scores[_summoner];\n    resource.burnFrom(_summoner, amount);\n    if (currentScore < 1) {\n      summoners.push(_summoner);\n    }\n    uint256 roll = RANDOM.d20(_summoner) + 1;\n    scores[_summoner] += roll * amount;\n    totalBurned += amount;\n    emit Score(_summoner, roll, amount);\n  }\n\n  function claim(uint256 _summoner) external payable {\n    require(block.timestamp > endDate, \"Competition not over\");\n    require(_isRarityOwner(_summoner), \"Must own NFT\");\n    require(!claimed, \"Already Claimed\");\n    uint256 highScore = 0;\n    uint256 scoresLength = summoners.length;\n    for (uint256 x = 0; x < scoresLength; x++) {\n      if (scores[summoners[x]] > highScore) {\n        highScore = scores[summoners[x]];\n      }\n    }\n    require(scores[_summoner] == highScore, \"Not the winner\");\n    payable(msg.sender).transfer(address(this).balance);\n    claimed = true;\n    emit Claim(_summoner, msg.sender, address(this).balance);\n  }\n\n  function withdrawl() external payable {\n    require(owner == msg.sender, \"Must be owner\");\n    require(\n      block.timestamp < startDate || block.timestamp > endDate + (7 * DAY),\n      \"Cannot withdrawl\"\n    );\n    payable(msg.sender).transfer(address(this).balance);\n    claimed = true;\n    emit Withdrawl(msg.sender, address(this).balance);\n  }\n\n  function getSummoners() external view returns (uint256[] memory) {\n    return summoners;\n  }\n\n  function _isRarityOwner(uint256 _summoner) internal view returns (bool) {\n    return RARITY.ownerOf(_summoner) == msg.sender;\n  }\n}\n"
    },
    "contracts/competitions/Subsidy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/BurnCompetition.sol\";\n\ncontract Subsidy is BurnCompetition {\n  constructor(\n    IResource _resource,\n    uint256 _start,\n    uint256 _end\n  ) BurnCompetition(_resource, _start, _end) {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}