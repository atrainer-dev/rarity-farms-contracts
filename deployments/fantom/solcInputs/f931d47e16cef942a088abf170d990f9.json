{
  "language": "Solidity",
  "sources": {
    "contracts/farms/Beginner.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"../abstracts/Farm.sol\";\n\ncontract BeginnerFarm is Farm {\n  using SafeMath for uint256;\n\n  string public constant name = \"RarityFarms\";\n  string public constant symbol = \"BFARM\";\n\n  ICrop public corn;\n  ICrop public wheat;\n  ICrop public beans;\n  ICrop public barley;\n\n  // Events\n\n  constructor(\n    address _corn,\n    address _wheat,\n    address _beans,\n    address _barley\n  ) Farm() {\n    corn = ICrop(_corn);\n    wheat = ICrop(_wheat);\n    beans = ICrop(_beans);\n    barley = ICrop(_barley);\n\n    yieldBase = 5000;\n  }\n\n  function farm(uint256 summoner, uint8 resource) external {\n    require(resource > 0 && resource < 5, \"Invalid Resource\");\n    if (resource == 1) {\n      _farm(summoner, corn);\n    } else if (resource == 2) {\n      _farm(summoner, wheat);\n    } else if (resource == 3) {\n      _farm(summoner, beans);\n    } else if (resource == 4) {\n      _farm(summoner, barley);\n    }\n  }\n\n  function farmCorn(uint256 summoner) external {\n    _farm(summoner, corn);\n  }\n\n  function farmWheat(uint256 summoner) external {\n    _farm(summoner, wheat);\n  }\n\n  function farmBeans(uint256 summoner) external {\n    _farm(summoner, beans);\n  }\n\n  function farmBarley(uint256 summoner) external {\n    _farm(summoner, barley);\n  }\n\n  function addPauser(address addr) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    _addPauser(addr);\n  }\n\n  function removePauser(address addr) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    _removePauser(addr);\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/abstracts/Farm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./Rarity.sol\";\nimport \"./Ownable.sol\";\nimport \"./Pausable.sol\";\n\ninterface ICrop {\n  function mint(uint256 summoner, uint256 amount) external;\n}\n\nabstract contract Farm is Rarity, Ownable, Pausable {\n  using SafeMath for uint256;\n  using SafeMath for uint32;\n\n  uint256 public yield;\n  uint32 public yieldBase;\n  address public disaster;\n\n  event FarmResource(\n    uint256 indexed _summoner,\n    address _crop,\n    uint256 _amount,\n    uint256 _yield,\n    uint256 _roll,\n    uint256 _level\n  );\n\n  constructor() Rarity() Ownable() {\n    yield = 0;\n    yieldBase = 5000;\n    disaster = address(0);\n  }\n\n  function setOwner(address _owner) external returns (bool) {\n    require(owner == msg.sender, \"Must be owner\");\n    _setOwner(_owner);\n    return true;\n  }\n\n  function _farm(uint256 _summoner, ICrop _crop) internal {\n    require(_isPaused() == false, \"Farm not available\");\n    _getRarity().adventure(_summoner);\n    uint256[4] memory _stats = _getSummoner(_summoner);\n    uint32 _multiplier = _yieldMultiplier();\n    uint64 _amount = _multiplier * 1e18;\n    _crop.mint(_summoner, _amount);\n    uint256 _roll = _getRarityRandom().d20(_summoner);\n    uint256 _yield = _roll.mul(_stats[3]);\n    yield = yield.add(_yield);\n    emit FarmResource(\n      _summoner,\n      address(_crop),\n      _amount,\n      _yield,\n      _roll,\n      _stats[3]\n    );\n  }\n\n  function yieldMultiplier() external view returns (uint32) {\n    return _yieldMultiplier();\n  }\n\n  function _yieldMultiplier() internal view returns (uint32) {\n    if (yield < yieldBase) {\n      return 1;\n    } else if (yield < yieldBase.mul(2)) {\n      return 2;\n    } else if (yield < yieldBase.mul(3)) {\n      return 3;\n    } else if (yield < yieldBase.mul(4)) {\n      return 4;\n    } else {\n      return 5;\n    }\n  }\n\n  function setYieldBase(uint32 base) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    yieldBase = base;\n  }\n\n  function setYield(uint256 _yield) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    yield = _yield;\n  }\n\n  function setDisaster(address _addr, uint256 _yield) external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    _addPauser(_addr);\n    disaster = _addr;\n    yield = _yield;\n    _pause();\n  }\n\n  function clearDisaster() external {\n    require(\n      _isOwner(msg.sender) || _isDisaster(msg.sender),\n      \"Must be owner or disaster\"\n    );\n    _removePauser(disaster);\n    disaster = address(0);\n    _unpause();\n  }\n\n  function _isDisaster(address _addr) internal view returns (bool) {\n    return disaster == _addr;\n  }\n}\n"
    },
    "contracts/abstracts/Rarity.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IRarity {\n  function level(uint256) external view returns (uint256);\n\n  function getApproved(uint256) external view returns (address);\n\n  function ownerOf(uint256) external view returns (address);\n\n  function summoner(uint256)\n    external\n    view\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    );\n\n  function adventure(uint256) external;\n}\n\ninterface IRarityAttributes {\n  function ability_scores(uint256)\n    external\n    view\n    returns (\n      uint32,\n      uint32,\n      uint32,\n      uint32,\n      uint32,\n      uint32\n    );\n}\n\ninterface IRarityRandomCodex {\n  function d20(uint256) external view returns (uint256);\n}\n\nabstract contract Rarity {\n  IRarity constant _rm = IRarity(0xce761D788DF608BD21bdd59d6f4B54b2e27F25Bb);\n  IRarityAttributes constant _attr =\n    IRarityAttributes(0xB5F5AF1087A8DA62A23b08C00C6ec9af21F397a1);\n  IRarityRandomCodex constant _random =\n    IRarityRandomCodex(0x7426dBE5207C2b5DaC57d8e55F0959fcD99661D4);\n\n  constructor() {}\n\n  function _isRarityOwner(uint256 _summoner) internal view returns (bool) {\n    return _getRarity().ownerOf(_summoner) == msg.sender;\n  }\n\n  function _isRarityApproved(uint256 _summoner) internal view returns (bool) {\n    return _getRarity().getApproved(_summoner) == msg.sender;\n  }\n\n  function _isRarityApprovedOrOwner(uint256 _summoner)\n    internal\n    view\n    returns (bool)\n  {\n    return _isRarityApproved(_summoner) || _isRarityOwner(_summoner);\n  }\n\n  function _getRarity() internal pure returns (IRarity) {\n    return _rm;\n  }\n\n  function _getRarityAttributes() internal pure returns (IRarityAttributes) {\n    return _attr;\n  }\n\n  function _getRarityRandom() internal pure returns (IRarityRandomCodex) {\n    return _random;\n  }\n\n  function _getSummonerAttributes(uint256 _summoner)\n    internal\n    view\n    returns (uint32[6] memory)\n  {\n    (\n      uint32 _str,\n      uint32 _dex,\n      uint32 _con,\n      uint32 _int,\n      uint32 _wis,\n      uint32 _cha\n    ) = _getRarityAttributes().ability_scores(_summoner);\n    uint32[6] memory scores = [_str, _dex, _con, _int, _wis, _cha];\n    return scores;\n  }\n\n  function _getSummoner(uint256 _summoner)\n    internal\n    view\n    returns (uint256[4] memory)\n  {\n    (uint256 _xp, uint256 _log, uint256 _class, uint256 _level) = _getRarity()\n      .summoner(_summoner);\n    uint256[4] memory result = [_xp, _log, _class, _level];\n    return result;\n  }\n}\n"
    },
    "contracts/abstracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nabstract contract Ownable {\n  address public owner;\n\n  constructor() {\n    owner = msg.sender;\n  }\n\n  function _isOwner(address addr) internal view returns (bool) {\n    return owner == addr;\n  }\n\n  function _setOwner(address addr) internal returns (bool) {\n    owner = addr;\n    return true;\n  }\n}\n"
    },
    "contracts/abstracts/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nabstract contract Pausable {\n  bool public paused;\n  mapping(address => bool) public pausers;\n\n  constructor() {\n    paused = false;\n    pausers[msg.sender] = true;\n  }\n\n  function _isPaused() internal view returns (bool) {\n    return paused == true;\n  }\n\n  function pause() external returns (bool) {\n    require(pausers[msg.sender], \"Pause denied\");\n    _pause();\n    return true;\n  }\n\n  function unpause() external returns (bool) {\n    require(pausers[msg.sender], \"Unpause denied\");\n    _unpause();\n    return true;\n  }\n\n  function _addPauser(address addr) internal returns (bool) {\n    pausers[addr] = true;\n    return true;\n  }\n\n  function _removePauser(address addr) internal returns (bool) {\n    pausers[addr] = false;\n    return true;\n  }\n\n  function _pause() internal {\n    paused = true;\n  }\n\n  function _unpause() internal {\n    paused = false;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}