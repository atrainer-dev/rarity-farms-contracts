{
  "language": "Solidity",
  "sources": {
    "contracts/abstracts/Resource.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./RERC20.sol\";\nimport \"./Mintable.sol\";\nimport \"./Burnable.sol\";\nimport \"./AbilityModifier.sol\";\nimport \"./Lockable.sol\";\nimport \"./PointModifier.sol\";\n\nabstract contract Resource is\n  RERC20,\n  RarityBurnable,\n  RarityMintable,\n  Lockable,\n  AbilityModifier,\n  PointModifier\n{\n  uint8 public weight;\n\n  constructor(uint8 _weight) {\n    weight = _weight;\n  }\n\n  function lock() external {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    locked = true;\n  }\n\n  function mint(uint256 summoner, uint256 amount) external {\n    require(!_isPaused(), \"Contract is paused\");\n    require(minters[msg.sender] == true, \"Mint Access Denied\");\n    _mint(summoner, amount);\n  }\n\n  function addMinter(address minter) external {\n    require(msg.sender == owner, \"Must be owner\");\n    _addMinter(minter);\n  }\n\n  function removeMinter(address minter) external {\n    require(msg.sender == owner, \"Must be owner\");\n    _removeMinter(minter);\n  }\n\n  function burn(uint256 summoner, uint256 amount) external {\n    require(!_isPaused(), \"Contract is paused\");\n    require(_isRarityOwner(summoner), \"Must be owner\");\n    _burn(summoner, amount);\n  }\n\n  function burnFrom(uint256 summoner, uint256 amount) external {\n    require(!_isPaused(), \"Contract is paused\");\n    uint256 allowance = burnAllowance[msg.sender][summoner];\n    require(amount <= allowance, \"Requested Burn greater than approval\");\n    _burn(summoner, amount);\n    burnAllowance[msg.sender][summoner] = allowance - amount;\n  }\n\n  function burnApprove(\n    uint256 summoner,\n    address burner,\n    uint256 amount\n  ) external {\n    require(!_isPaused(), \"Contract is paused\");\n    require(_isRarityOwner(summoner), \"Must be owner\");\n    _burnApprove(summoner, burner, amount);\n  }\n\n  function setPointIncreasers(\n    uint8 hp,\n    uint8 mp,\n    uint8 stamina\n  ) external {\n    require(!_isLocked(), \"Resource Locked\");\n    require(_isOwner(msg.sender), \"Must be owner\");\n    _setPointIncreasers(hp, mp, stamina);\n  }\n\n  function setPointDecreasers(\n    uint8 hp,\n    uint8 mp,\n    uint8 stamina\n  ) external {\n    require(!_isLocked(), \"Resource Locked\");\n    require(_isOwner(msg.sender), \"Must be owner\");\n    _setPointDecreasers(hp, mp, stamina);\n  }\n\n  function setAbilityIncreasers(\n    uint8 str,\n    uint8 dex,\n    uint8 con,\n    uint8 inte,\n    uint8 wis,\n    uint8 char\n  ) external {\n    require(!_isLocked(), \"Resource Locked\");\n    require(_isOwner(msg.sender), \"Must be owner\");\n    _setAbilityIncreasers(str, dex, con, inte, wis, char);\n  }\n\n  function setAbilityDecreasers(\n    uint8 str,\n    uint8 dex,\n    uint8 con,\n    uint8 inte,\n    uint8 wis,\n    uint8 char\n  ) external {\n    require(!_isLocked(), \"Resource Locked\");\n    require(_isOwner(msg.sender), \"Must be owner\");\n    _setAbilityDecreasers(str, dex, con, inte, wis, char);\n  }\n\n  function setWeight(uint8 _weight) external {\n    require(!_isLocked(), \"Resource Locked\");\n    require(_isOwner(msg.sender), \"Must be owner\");\n    weight = _weight;\n  }\n}\n"
    },
    "contracts/abstracts/RERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./Rarity.sol\";\nimport \"./Ownable.sol\";\nimport \"./Pausable.sol\";\n\ninterface IRarityFungible {\n  event Transfer(uint256 indexed from, uint256 indexed to, uint256 amount);\n  event Approval(uint256 indexed from, uint256 indexed to, uint256 amount);\n\n  function name() external view returns (string memory);\n\n  function symbol() external view returns (string memory);\n\n  function decimals() external view returns (uint8);\n\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(uint256 owner) external view returns (uint256);\n\n  function allowance(uint256 owner, uint256 spender)\n    external\n    view\n    returns (uint256);\n\n  function approve(\n    uint256 from,\n    uint256 spender,\n    uint256 amount\n  ) external returns (bool);\n\n  function transfer(\n    uint256 from,\n    uint256 to,\n    uint256 amount\n  ) external returns (bool);\n\n  function transferFrom(\n    uint256 executor,\n    uint256 from,\n    uint256 to,\n    uint256 amount\n  ) external returns (bool);\n}\n\nabstract contract RERC20 is IRarityFungible, Rarity, Ownable, Pausable {\n  string _name;\n  string _symbol;\n  uint256 public _totalSupply = 0;\n  uint8 public constant _decimals = 18;\n\n  mapping(uint256 => uint256) public _balanceOf;\n  mapping(uint256 => mapping(uint256 => uint256)) public _transferAllowance;\n\n  constructor() Rarity() Ownable() Pausable() {}\n\n  function name() external view override returns (string memory) {\n    return _name;\n  }\n\n  function symbol() external view override returns (string memory) {\n    return _symbol;\n  }\n\n  function decimals() external view override returns (uint8) {\n    return _decimals;\n  }\n\n  function totalSupply() external view override returns (uint256) {\n    return _totalSupply;\n  }\n\n  function balanceOf(uint256 owner) external view override returns (uint256) {\n    return _balanceOf[owner];\n  }\n\n  function allowance(uint256 owner, uint256 spender)\n    external\n    view\n    override\n    returns (uint256)\n  {\n    return _transferAllowance[owner][spender];\n  }\n\n  function approve(\n    uint256 from,\n    uint256 spender,\n    uint256 amount\n  ) external override returns (bool) {\n    require(_isRarityApprovedOrOwner(from), \"Must be owner\");\n    _transferAllowance[from][spender] = amount;\n\n    emit Approval(from, spender, amount);\n    return true;\n  }\n\n  function transfer(\n    uint256 from,\n    uint256 to,\n    uint256 amount\n  ) external override returns (bool) {\n    require(!_isPaused(), \"Contract is paused\");\n    require(_isRarityApprovedOrOwner(from), \"Must be owner\");\n    _transferTokens(from, to, amount);\n    return true;\n  }\n\n  function transferFrom(\n    uint256 executor,\n    uint256 from,\n    uint256 to,\n    uint256 amount\n  ) external override returns (bool) {\n    require(!_isPaused(), \"Contract is paused\");\n    require(_isRarityApprovedOrOwner(executor), \"Must be owner\");\n    uint256 spender = executor;\n    uint256 allow = _transferAllowance[from][spender];\n    require(amount <= allow, \"Transfer amount greater than approval\");\n    _transferTokens(from, to, amount);\n    _transferAllowance[from][spender] = allow - amount;\n    return true;\n  }\n\n  function _transferTokens(\n    uint256 from,\n    uint256 to,\n    uint256 amount\n  ) internal {\n    _balanceOf[from] -= amount;\n    _balanceOf[to] += amount;\n\n    emit Transfer(from, to, amount);\n  }\n\n  function setOwner(address _owner) external returns (bool) {\n    require(_isOwner(msg.sender), \"Must be owner\");\n    _setOwner(_owner);\n    return true;\n  }\n}\n"
    },
    "contracts/abstracts/Mintable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./RERC20.sol\";\n\nabstract contract RarityMintable is RERC20 {\n  mapping(address => bool) public minters;\n\n  event Mint(uint256 indexed from, uint256 indexed to, uint256 amount);\n\n  function _mint(uint256 dst, uint256 amount) internal {\n    _totalSupply += amount;\n    _balanceOf[dst] += amount;\n    emit Mint(dst, dst, amount);\n  }\n\n  function _addMinter(address minter) internal {\n    minters[minter] = true;\n  }\n\n  function _removeMinter(address minter) internal {\n    minters[minter] = false;\n  }\n}\n"
    },
    "contracts/abstracts/Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./RERC20.sol\";\n\nabstract contract RarityBurnable is RERC20 {\n  mapping(address => mapping(uint256 => uint256)) public burnAllowance;\n\n  event Burn(uint256 indexed from, uint256 indexed to, uint256 amount);\n  event BurnApproval(uint256 indexed from, address indexed to, uint256 amount);\n\n  function _burnApprove(\n    uint256 from,\n    address burner,\n    uint256 amount\n  ) internal returns (bool) {\n    burnAllowance[burner][from] = amount;\n    emit BurnApproval(from, burner, amount);\n    return true;\n  }\n\n  function _burn(uint256 dst, uint256 amount) internal {\n    uint256 balance = _balanceOf[dst];\n    require(balance >= amount, \"Balance too low\");\n    _totalSupply -= amount;\n    _balanceOf[dst] = balance - amount;\n    emit Burn(dst, dst, amount);\n  }\n}\n"
    },
    "contracts/abstracts/AbilityModifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nabstract contract AbilityModifier {\n  uint8[6] public _abilityIncreasers = [0, 0, 0, 0, 0, 0];\n  uint8[6] public _abilityDecreasers = [0, 0, 0, 0, 0, 0];\n\n  function getAbilityIncreasers() external view returns (uint8[6] memory) {\n    return _abilityIncreasers;\n  }\n\n  function getAbilityDecreasers() external view returns (uint8[6] memory) {\n    return _abilityDecreasers;\n  }\n\n  function _setAbilityIncreasers(\n    uint8 str,\n    uint8 dex,\n    uint8 con,\n    uint8 inte,\n    uint8 wis,\n    uint8 char\n  ) internal {\n    _abilityIncreasers = [str, dex, con, inte, wis, char];\n  }\n\n  function _setAbilityDecreasers(\n    uint8 str,\n    uint8 dex,\n    uint8 con,\n    uint8 inte,\n    uint8 wis,\n    uint8 char\n  ) internal {\n    _abilityDecreasers = [str, dex, con, inte, wis, char];\n  }\n}\n"
    },
    "contracts/abstracts/Lockable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nabstract contract Lockable {\n  bool public locked = false;\n\n  function _isLocked() internal view returns (bool) {\n    return locked == true;\n  }\n}\n"
    },
    "contracts/abstracts/PointModifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nabstract contract PointModifier {\n  // [HP, MP, STAMINA]\n  uint8[3] public _pointIncreasers = [0, 0, 0];\n  uint8[3] public _pointDecreasers = [0, 0, 0];\n\n  function getPointIncreasers() external view returns (uint8[3] memory) {\n    return _pointIncreasers;\n  }\n\n  function getPointDecreasers() external view returns (uint8[3] memory) {\n    return _pointDecreasers;\n  }\n\n  function _setPointIncreasers(\n    uint8 hp,\n    uint8 mp,\n    uint8 stamina\n  ) internal {\n    _pointIncreasers = [hp, mp, stamina];\n  }\n\n  function _setPointDecreasers(\n    uint8 hp,\n    uint8 mp,\n    uint8 stamina\n  ) internal {\n    _pointDecreasers = [hp, mp, stamina];\n  }\n}\n"
    },
    "contracts/abstracts/Rarity.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IRarity {\n  function level(uint256) external view returns (uint256);\n\n  function getApproved(uint256) external view returns (address);\n\n  function isApprovedForAll(address owner, address operator)\n    external\n    view\n    returns (bool);\n\n  function ownerOf(uint256) external view returns (address);\n\n  function summoner(uint256)\n    external\n    view\n    returns (\n      uint256,\n      uint256,\n      uint256,\n      uint256\n    );\n\n  function adventure(uint256) external;\n}\n\ninterface IRarityAttributes {\n  function ability_scores(uint256)\n    external\n    view\n    returns (\n      uint32,\n      uint32,\n      uint32,\n      uint32,\n      uint32,\n      uint32\n    );\n}\n\ninterface IRarityRandomCodex {\n  function d20(uint256) external view returns (uint256);\n}\n\nabstract contract Rarity {\n  IRarity constant _rm = IRarity(0xce761D788DF608BD21bdd59d6f4B54b2e27F25Bb);\n  IRarityAttributes constant _attr =\n    IRarityAttributes(0xB5F5AF1087A8DA62A23b08C00C6ec9af21F397a1);\n  IRarityRandomCodex constant _random =\n    IRarityRandomCodex(0x7426dBE5207C2b5DaC57d8e55F0959fcD99661D4);\n\n  constructor() {}\n\n  function _isRarityOwner(uint256 _summoner) internal view returns (bool) {\n    return _rm.ownerOf(_summoner) == msg.sender;\n  }\n\n  function _isRarityApproved(uint256 _summoner) internal view returns (bool) {\n    return\n      _rm.getApproved(_summoner) == msg.sender ||\n      _rm.isApprovedForAll(_rm.ownerOf(_summoner), msg.sender);\n  }\n\n  function _isRarityApprovedOrOwner(uint256 _summoner)\n    internal\n    view\n    returns (bool)\n  {\n    return _isRarityApproved(_summoner) || _isRarityOwner(_summoner);\n  }\n\n  function _getRarity() internal pure returns (IRarity) {\n    return _rm;\n  }\n\n  function _getRarityAttributes() internal pure returns (IRarityAttributes) {\n    return _attr;\n  }\n\n  function _getRarityRandom() internal pure returns (IRarityRandomCodex) {\n    return _random;\n  }\n\n  function _getSummonerAttributes(uint256 _summoner)\n    internal\n    view\n    returns (uint32[6] memory)\n  {\n    (\n      uint32 _str,\n      uint32 _dex,\n      uint32 _con,\n      uint32 _int,\n      uint32 _wis,\n      uint32 _cha\n    ) = _attr.ability_scores(_summoner);\n    uint32[6] memory scores = [_str, _dex, _con, _int, _wis, _cha];\n    return scores;\n  }\n\n  function _getSummoner(uint256 _summoner)\n    internal\n    view\n    returns (uint256[4] memory)\n  {\n    (uint256 _xp, uint256 _log, uint256 _class, uint256 _level) = _rm.summoner(\n      _summoner\n    );\n    uint256[4] memory result = [_xp, _log, _class, _level];\n    return result;\n  }\n}\n"
    },
    "contracts/abstracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nabstract contract Ownable {\n  address public owner;\n\n  constructor() {\n    owner = msg.sender;\n  }\n\n  function _isOwner(address addr) internal view returns (bool) {\n    return owner == addr;\n  }\n\n  function _setOwner(address addr) internal returns (bool) {\n    owner = addr;\n    return true;\n  }\n}\n"
    },
    "contracts/abstracts/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nabstract contract Pausable {\n  bool public paused;\n  mapping(address => bool) public pausers;\n\n  constructor() {\n    paused = false;\n    pausers[msg.sender] = true;\n  }\n\n  function _isPaused() internal view returns (bool) {\n    return paused == true;\n  }\n\n  function pause() external returns (bool) {\n    require(pausers[msg.sender], \"Pause denied\");\n    _pause();\n    return true;\n  }\n\n  function unpause() external returns (bool) {\n    require(pausers[msg.sender], \"Unpause denied\");\n    _unpause();\n    return true;\n  }\n\n  function _addPauser(address addr) internal returns (bool) {\n    pausers[addr] = true;\n    return true;\n  }\n\n  function _removePauser(address addr) internal returns (bool) {\n    pausers[addr] = false;\n    return true;\n  }\n\n  function _pause() internal {\n    paused = true;\n  }\n\n  function _unpause() internal {\n    paused = false;\n  }\n}\n"
    },
    "contracts/mill/Oil.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Resource.sol\";\n\ncontract Oil is Resource {\n  constructor() Resource(5) RERC20() {\n    _name = \"RarityFarms-Oil\";\n    _symbol = \"OIL\";\n  }\n}\n"
    },
    "contracts/mill/Meal.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Resource.sol\";\n\ncontract Meal is Resource {\n  constructor() Resource(5) RERC20() {\n    _name = \"RarityFarms-Meal\";\n    _symbol = \"MEAL\";\n  }\n}\n"
    },
    "contracts/mill/Malt.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Resource.sol\";\n\ncontract Malt is Resource {\n  constructor() Resource(5) RERC20() {\n    _name = \"RarityFarms-Malt\";\n    _symbol = \"MALT\";\n  }\n}\n"
    },
    "contracts/mill/Flour.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../abstracts/Resource.sol\";\n\ncontract Flour is Resource {\n  constructor() Resource(5) RERC20() {\n    _name = \"RarityFarms-Flour\";\n    _symbol = \"FLOUR\";\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}